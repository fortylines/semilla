<?xml version="1.0"?>
<section xmlns="http://docbook.org/ns/docbook" 
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>View Compositions</title>
    <date>February 17th, 2010</date>
  </info>

<!-- composition of document views: writing template -->
<para>
All the editable bits of a project are stored in a version controled repository. seed, the web front-end will present all pieces of information in the repository through a consistent HTML interface.</para>
<para>The document filename (most time its sole extension) will select a template view with which the document will be rendered, thus presenting the contributor with a document-sensitive user interface. 
<informaltable>
<info>
<title>Example of document to template association</title>
</info>
<tr><th>filename</th><th>template</th></tr>
<tr><td>.cc, .hh, .tcc</td><td>source</td></tr>
<tr><td>.book</td><td>generic document</td></tr>
</informaltable>
</para>
<!-- composition of document views: path through the C++ implementation. -->
<para>
Each template is centered around the main document with a set of Menu Widgets attached to it. Each widget itself implemented as a class derived from <link xlink:href="/seed/include/document.hh">document</link> presents meta information about the document such as its changelist.</para>
<para>
The implementation is using std::ostream hooks to perform text enhancements such as tagging links with special style when the endpoint does not exist for example. By design, it guarentees no links can be forgotten because of a programmer overlook. The same way glossary terms could be automatically transformed into an hot link without relying on a writer to specially insert markup for it.
</para>

<!-- composition of document views: caching of generated pages. -->
<para>
Each HTML page sent to the browser is generated out of a template and either an underlying document in pwd, buildTop or srcTop. This permits to keep read-only generated files out of the version control repository while providing a consistent framework to generate pages.
</para>
<para>
Right now pages are regenerated each time a document is accessed but there are no reason while HTML pages could not be cached. 
</para>

<!-- The way to turn the web-front end into an editable wiki is still
     under construction but will require handling of:
     #1 login.
     #2 commits.
-->

   <section>	 
    <title>Build View</title>

      <para>
    <link linkend="dws.book">dws</link>, the inter-project dependency tool will generate a log file with XML markups as part of building projects on a local machine. That build log is uploaded onto the server and presented among logs coming from other machines as part of the build view.
  </para>
  <para>
    The build view gives an overview of the set of all projects at a glance and can be used to assess the stability of the whole as a release candidate.
  </para>
  <para>
    The format of the build view is centered around a cross-product of projects vs. machines (or timestamps) shown as a table. Each cell does not only contain a color-code pass/fail code but the number of unit failures as well.
  </para>
</section>

	<section>
   <title>Project View</title>
  <para>
    The project view gives the status of a project at a glance. It contains the description and dependencies of a project as stated in the index.xml. A project view also contains the list of unit failures, checkstyle failures and open issues. There are also links to download <!-- through e-commerce transaction? --> the project as a package, browse the source code and sign-on to the rss feed.  
  </para>
</section>

<section>
	<title>Book View</title>

  <para>
    The pupose of the book view is to present documentation in the repository with docbook markups as HTML pages.
  </para>
  <para>
    The transformation, implemented the <link xlink:href="/seed/include/docbook.hh">docbook class</link> in <link xlink:href="/seed/src/docbook.cc">docbook.cc</link> is usually very straightforward. In most cases, it substitutes a docbook elements in the original DOM by a suitable equivalent HTML element.
  </para>
</section>


<section>
<title>Source code View</title>
  

  <para>
      The browser view presents a source file (.cc, .py, etc.) in the repository as a syntax highlighted document. A changeset and a directory listing widgets are associated to the current source file in the view. Each link in the changeset brings a diff view between the head and the link's revision.  
  </para>
  <para>
While source code and documentation are usually maintained and published separately, Fortylines solutions' <link linkend="/seed">seed</link> product enables source code and other documents to cross-reference each other easily through nice web looking presentation of source files and urls embedded in comments.
</para>
<!-- rapidxml will parse '&lt;' as '<' which defies the purpose of the example
     so we put the following element to contain CDATA.
     rapidxml will also not give you any node for a sequence of spaces so we
     integrate the spaces in the previous phrase tag. -->
<programlisting>
<![CDATA[
/* 
   This is a reference to &lt;a href="dws.book"&gt;web-based documentation&lt;/a&gt;. 
*/

int main( int argc, char *argv[] ) {
    return 0;
}
]]>
</programlisting>
<para>is published as</para>
<programlisting>
<phrase role="comment">/* </phrase>
<phrase role="comment">   This is a reference to <link xlink:href="dws.book">web-based documentation</link>.
</phrase>
<phrase role="comment">*/

</phrase>
<phrase role="identifier">int </phrase><phrase role="identifier">main</phrase><phrase role="punctuator">( </phrase><phrase role="identifier">int </phrase><phrase role="identifier">argc</phrase><phrase role="punctuator">, </phrase><phrase role="keyword">char </phrase><phrase role="operator">*</phrase><phrase role="identifier">argv</phrase><phrase role="punctuator">[</phrase><phrase role="punctuator">] </phrase><phrase role="punctuator">) </phrase><phrase role="punctuator">{
    </phrase>
<phrase role="keyword">return </phrase><phrase role="decimalLiteral">0</phrase><phrase role="punctuator">;
</phrase>
<phrase role="punctuator">}
</phrase>
</programlisting>

</section>
</section>

<?xml version="1.0"?>
<section xmlns="http://docbook.org/ns/docbook" 
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <!-- Navigate -->
  <info>
    <title>Features and Technologies</title>
    <date>February 17th, 2010</date>
  </info>

  <para>The technologies usually involved in information distribution are</para>
    <itemizedlist>
      <listitem>source repository browser</listitem>
      <itemizedlist>
	<listitem>browse specific revisions and tags</listitem>
	<listitem>diff between revisions</listitem>
	<listitem>view by directory, changesets, history</listitem>
      </itemizedlist>
      <listitem>downloadable nightly builds as packages</listitem>
      <listitem>online postings (wiki, blog, etc.)</listitem>
      <listitem>mechanically generated reports (build, tests, etc.)</listitem>
      <listitem>tracking contributions (hour logs, bugs, etc.)</listitem>
      <listitem>notification mechanisms (rss, e-mails, etc.)</listitem>
      <listitem>search engine</listitem>
    </itemizedlist>

    <para>To distribute information efficiently, the support technologies should have the following features</para>
    <itemizedlist>
      <listitem>Single sign-on</listitem>
      <listitem>Consistent interface across functionalities</listitem>
      <listitem>One-click addition of contributors</listitem>
      <listitem>Automated integration of mechanically generated reports</listitem>
      <listitem>Mechanically generated reports through intelligent data mining (ex. graphs with number of commits per days vs. unit tests passing)</listitem>
      <listitem>Search engine through all postings, code, wiki, etc. With an efficient search engine, it could go as far as marking documents with special <emphasis>todo</emphasis> tags instead of relying on a bug tracking system.</listitem>
      <listitem>Links between source code and documentation files. That is a url in a source comment should be traversable and documentation files could have url to source code files.</listitem>
      <listitem>Collaborative drawing whiteboard</listitem>
      <listitem>Import/export of documents from/to standard formats (.sxc, .pdf, etc.)</listitem>
      <listitem>Context sensitive integrated &quot;educational notes&quot; on how to use the information distribution system.</listitem>
    </itemizedlist>

    <para>HTML remains central for presentation of a web interface and PDF remains central for printed documentation. As a result, content is usually stored in a server repository as a presentation independent file which is processed by appropriate transformation tools on request.</para>
    <para><link xlink:href="http://www.docbook.org/tdg5/en/html/docbook.html">DocBook</link> is a popular format to store documentation content. When the documentation is embed into source code comments, tools such as <link xlink:href="http://www.dbdoclet.org/">dbdoclet</link> can be used to extract it into a docbook document.</para>
    <para>The XSL language and XSL processors (ex. <link xlink:href="http://xml.apache.org/xalan-c/index.html">Xalan</link>) are typically used to transform XML documents in general. DocBook documents can be turned into either HTML or PDF through XSL based <link xlink:href="http://docbook.sourceforge.net/">docbook tools</link>. Using directly an XML parser (ex. <link xlink:href="http://rapidxml.sourceforge.net/">RapidXML</link>), PDF C++ libraries (ex. <link xlink:href="http://www.jagpdf.com/">JagPDF</link>), custom tools can also be implemented to transform content documents. The result can be served directly to the client or some sort of caching framework (ex. <link xlink:href="http://murka.sourceforge.net/">Murka</link>, <link xlink:href="http://axkit.org/">Apache AxKit</link>) can be used to handle requests more efficiently.</para>
    <para>When presented as a website, the resulting HTML pages will further be customized with a specific company look and feel through CSS style-sheets.</para> 
    <para>Web 2.0 technologies enable contributors to use a web browser as a text editor to create and modify remote files stored on a server. Heavy client-side Javascript are involved to implement full editors (ex. <link xlink:href="http://www.freedomeditor.com/">Freedom editor</link>, <link xlink:href="http://tinymce.moxiecode.com/">TinyMCE</link>) and other UI interactions such as <link xlink:href="http://www.walterzorn.com/dragdrop/dragdrop_e.htm">Javascript Drag-n-Drop</link> (<link xlink:href="http://www.webreference.com/programming/javascript/mk/column2/">second example</link>). HTTP extension protocols such as <link xlink:href="http://en.wikipedia.org/wiki/WebDAV">WebDAV</link>, a "Web-based Distributed Authoring and Versioning", allow contributors to collaboratively edit and manage files on remote web servers and <link xlink:href="http://en.wikipedia.org/wiki/RSS">RSS</link> is a popular standard for notification of website updates.</para>

    <!-- \todo open source search engine. All files in srcTop make it easy 
	 for indexing through same search engine. -->
    <!-- \todo There are a few web repository browser (<link xlink:href="http://viewgit.sourceforge.net/">ViewGit</link>, Chora, ViewVC, Code Librarian) already available. Need to compare feature set with semilla. -->

</section>


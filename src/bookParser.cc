/* docbookParser.cc
 * ver 1.00
 * Computer generated
 * 2-8-2010
 */

#include <boost/throw_exception.hpp>
#include "bookParser.hh"
#include "docbook.hh"

void docbookParser::error()
{
  boost::throw_exception(docbookParseError("parsing error"));
}

void docbookParser::pass( docbookToken t )
{
	assert( scanner != NULL );
	if( current == t ) current = scanner->read(); else error();
}

docbookParser::docbookParser( docbookScanner& s, docbook& b )
	: scanner(&s), builder(&b)
{
	current = scanner->read();
}

void docbookParser::lltitle()
{
    std::cerr << "!!! docbookParser::lltitle()" << std::endl;
	if( current == titleStart ) {
		pass(titleStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(titleEnd);
	} else error();
}

void docbookParser::llinlinemediaobject()
{
	if( current == inlinemediaobjectStart ) {
		pass(inlinemediaobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == altStart ) {
			llalt();
		}
		if( current == videoobjectStart ) {
			llvideoobject();
		} else if( current == audioobjectStart ) {
			llaudioobject();
		} else if( current == imageobjectStart ) {
			llimageobject();
		} else if( current == textobjectStart ) {
			lltextobject();
		} else if( current == imageobjectcoStart ) {
			llimageobjectco();
		} else error();
		while( current == videoobjectStart || current == audioobjectStart || current == imageobjectStart || current == textobjectStart || current == imageobjectcoStart ) {
			if( current == videoobjectStart ) {
				llvideoobject();
			} else if( current == audioobjectStart ) {
				llaudioobject();
			} else if( current == imageobjectStart ) {
				llimageobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == imageobjectcoStart ) {
				llimageobjectco();
			} else error();
		}
		pass(inlinemediaobjectEnd);
	} else error();
}

void docbookParser::llremark()
{
	if( current == remarkStart ) {
		pass(remarkStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(remarkEnd);
	} else error();
}

void docbookParser::llsuperscript()
{
	if( current == superscriptStart ) {
		pass(superscriptStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(superscriptEnd);
	} else error();
}

void docbookParser::llsubscript()
{
	if( current == subscriptStart ) {
		pass(subscriptStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(subscriptEnd);
	} else error();
}

void docbookParser::llxref()
{
	if( current == xrefStart ) {
		pass(xrefStart);
		pass(xrefEnd);
	} else error();
}

void docbookParser::lllink()
{
	if( current == linkStart ) {
		pass(linkStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(linkEnd);
	} else error();
}

void docbookParser::llolink()
{
	if( current == olinkStart ) {
		pass(olinkStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(olinkEnd);
	} else error();
}

void docbookParser::llanchor()
{
	if( current == anchorStart ) {
		pass(anchorStart);
		pass(anchorEnd);
	} else error();
}

void docbookParser::llbiblioref()
{
	if( current == bibliorefStart ) {
		pass(bibliorefStart);
		pass(bibliorefEnd);
	} else error();
}

void docbookParser::llalt()
{
	if( current == altStart ) {
		pass(altStart);
		while( current == inlinemediaobjectStart ) {
			llinlinemediaobject();
		}
		pass(altEnd);
	} else error();
}

void docbookParser::llannotation()
{
	if( current == annotationStart ) {
		pass(annotationStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(annotationEnd);
	} else error();
}

void docbookParser::llindexterm()
{
	if( current == indextermStart ) {
		pass(indextermStart);
		if( current == primaryStart ) {
			llprimary();
		}
		if( current == secondaryStart || current == seeStart || current == seealsoStart ) {
			if( current == secondaryStart ) {
				llsecondary();
				if( current == tertiaryStart || current == seeStart || current == seealsoStart ) {
					if( current == tertiaryStart ) {
						lltertiary();
						if( current == seeStart || current == seealsoStart ) {
							if( current == seeStart ) {
								llsee();
							} else if( current == seealsoStart ) {
								llseealso();
								while( current == seealsoStart ) {
									llseealso();
								}
							} else error();
						}
					} else if( current == seeStart ) {
						llsee();
					} else if( current == seealsoStart ) {
						llseealso();
						while( current == seealsoStart ) {
							llseealso();
						}
					} else error();
				}
			} else if( current == seeStart ) {
				llsee();
			} else if( current == seealsoStart ) {
				llseealso();
				while( current == seealsoStart ) {
					llseealso();
				}
			} else error();
		}
		pass(indextermEnd);
	} else error();
}

void docbookParser::llabbrev()
{
	if( current == abbrevStart ) {
		pass(abbrevStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(abbrevEnd);
	} else error();
}

void docbookParser::llacronym()
{
	if( current == acronymStart ) {
		pass(acronymStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(acronymEnd);
	} else error();
}

void docbookParser::lldate()
{
	if( current == dateStart ) {
		pass(dateStart);
		pass(dateEnd);
	} else error();
}

void docbookParser::llemphasis()
{
	if( current == emphasisStart ) {
		pass(emphasisStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(emphasisEnd);
	} else error();
}

void docbookParser::llfootnote()
{
	if( current == footnoteStart ) {
		pass(footnoteStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(footnoteEnd);
	} else error();
}

void docbookParser::llfootnoteref()
{
	if( current == footnoterefStart ) {
		pass(footnoterefStart);
		pass(footnoterefEnd);
	} else error();
}

void docbookParser::llforeignphrase()
{
	if( current == foreignphraseStart ) {
		pass(foreignphraseStart);
		while( current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == firsttermStart || current == glosstermStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart ) {
			if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else error();
		}
		pass(foreignphraseEnd);
	} else error();
}

void docbookParser::llphrase()
{
	if( current == phraseStart ) {
		pass(phraseStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(phraseEnd);
	} else error();
}

void docbookParser::llquote()
{
	if( current == quoteStart ) {
		pass(quoteStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(quoteEnd);
	} else error();
}

void docbookParser::llwordasword()
{
	if( current == wordaswordStart ) {
		pass(wordaswordStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(wordaswordEnd);
	} else error();
}

void docbookParser::llfirstterm()
{
	if( current == firsttermStart ) {
		pass(firsttermStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(firsttermEnd);
	} else error();
}

void docbookParser::llglossterm()
{
	if( current == glosstermStart ) {
		pass(glosstermStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(glosstermEnd);
	} else error();
}

void docbookParser::llcoref()
{
	if( current == corefStart ) {
		pass(corefStart);
		pass(corefEnd);
	} else error();
}

void docbookParser::lltrademark()
{
	if( current == trademarkStart ) {
		pass(trademarkStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(trademarkEnd);
	} else error();
}

void docbookParser::llproductnumber()
{
	if( current == productnumberStart ) {
		pass(productnumberStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(productnumberEnd);
	} else error();
}

void docbookParser::llproductname()
{
	if( current == productnameStart ) {
		pass(productnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(productnameEnd);
	} else error();
}

void docbookParser::lldatabase()
{
	if( current == databaseStart ) {
		pass(databaseStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(databaseEnd);
	} else error();
}

void docbookParser::llapplication()
{
	if( current == applicationStart ) {
		pass(applicationStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(applicationEnd);
	} else error();
}

void docbookParser::llhardware()
{
	if( current == hardwareStart ) {
		pass(hardwareStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(hardwareEnd);
	} else error();
}

void docbookParser::llcitation()
{
	if( current == citationStart ) {
		pass(citationStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(citationEnd);
	} else error();
}

void docbookParser::llciterefentry()
{
	if( current == citerefentryStart ) {
		pass(citerefentryStart);
		llrefentrytitle();
		if( current == manvolnumStart ) {
			llmanvolnum();
		}
		pass(citerefentryEnd);
	} else error();
}

void docbookParser::llcitetitle()
{
	if( current == citetitleStart ) {
		pass(citetitleStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(citetitleEnd);
	} else error();
}

void docbookParser::llcitebiblioid()
{
	if( current == citebiblioidStart ) {
		pass(citebiblioidStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(citebiblioidEnd);
	} else error();
}

void docbookParser::llauthor()
{
	if( current == authorStart ) {
		pass(authorStart);
		if( current == orgnameStart ) {
			llorgname();
			while( current == addressStart || current == affiliationStart || current == orgdivStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == orgdivStart ) {
					llorgdiv();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else if( current == personnameStart ) {
			llpersonname();
			while( current == personblurbStart || current == addressStart || current == affiliationStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == personblurbStart ) {
					llpersonblurb();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else error();
		pass(authorEnd);
	} else error();
}

void docbookParser::llperson()
{
	if( current == personStart ) {
		pass(personStart);
		llpersonname();
		while( current == personblurbStart || current == addressStart || current == affiliationStart || current == emailStart || current == uriStart ) {
			if( current == personblurbStart ) {
				llpersonblurb();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == affiliationStart ) {
				llaffiliation();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == uriStart ) {
				lluri();
			} else error();
		}
		pass(personEnd);
	} else error();
}

void docbookParser::llpersonname()
{
	if( current == personnameStart ) {
		pass(personnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == honorificStart || current == firstnameStart || current == surnameStart || current == lineageStart || current == othernameStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == honorificStart ) {
				llhonorific();
			} else if( current == firstnameStart ) {
				llfirstname();
			} else if( current == surnameStart ) {
				llsurname();
			} else if( current == lineageStart ) {
				lllineage();
			} else if( current == othernameStart ) {
				llothername();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(personnameEnd);
	} else error();
}

void docbookParser::llorg()
{
	if( current == orgStart ) {
		pass(orgStart);
		llorgname();
		while( current == addressStart || current == affiliationStart || current == orgdivStart || current == emailStart || current == uriStart ) {
			if( current == addressStart ) {
				lladdress();
			} else if( current == affiliationStart ) {
				llaffiliation();
			} else if( current == orgdivStart ) {
				llorgdiv();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == uriStart ) {
				lluri();
			} else error();
		}
		pass(orgEnd);
	} else error();
}

void docbookParser::llorgname()
{
	if( current == orgnameStart ) {
		pass(orgnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(orgnameEnd);
	} else error();
}

void docbookParser::lleditor()
{
	if( current == editorStart ) {
		pass(editorStart);
		if( current == orgnameStart ) {
			llorgname();
			while( current == addressStart || current == affiliationStart || current == orgdivStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == orgdivStart ) {
					llorgdiv();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else if( current == personnameStart ) {
			llpersonname();
			while( current == personblurbStart || current == addressStart || current == affiliationStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == personblurbStart ) {
					llpersonblurb();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else error();
		pass(editorEnd);
	} else error();
}

void docbookParser::lljobtitle()
{
	if( current == jobtitleStart ) {
		pass(jobtitleStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(jobtitleEnd);
	} else error();
}

void docbookParser::llreplaceable()
{
	if( current == replaceableStart ) {
		pass(replaceableStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == coStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else error();
		}
		pass(replaceableEnd);
	} else error();
}

void docbookParser::llpackage()
{
	if( current == packageStart ) {
		pass(packageStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(packageEnd);
	} else error();
}

void docbookParser::llparameter()
{
	if( current == parameterStart ) {
		pass(parameterStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(parameterEnd);
	} else error();
}

void docbookParser::lltermdef()
{
	if( current == termdefStart ) {
		pass(termdefStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(termdefEnd);
	} else error();
}

void docbookParser::llnonterminal()
{
	if( current == nonterminalStart ) {
		pass(nonterminalStart);
		pass(nonterminalEnd);
	} else error();
}

void docbookParser::llsystemitem()
{
	if( current == systemitemStart ) {
		pass(systemitemStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == coStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else error();
		}
		pass(systemitemEnd);
	} else error();
}

void docbookParser::lloption()
{
	if( current == optionStart ) {
		pass(optionStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(optionEnd);
	} else error();
}

void docbookParser::lloptional()
{
	if( current == optionalStart ) {
		pass(optionalStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(optionalEnd);
	} else error();
}

void docbookParser::llproperty()
{
	if( current == propertyStart ) {
		pass(propertyStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(propertyEnd);
	} else error();
}

void docbookParser::llinlineequation()
{
	if( current == inlineequationStart ) {
		pass(inlineequationStart);
		if( current == altStart ) {
			llalt();
		}
		if( current == inlinemediaobjectStart ) {
			llinlinemediaobject();
			while( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			}
		} else if( current == mathphraseStart ) {
			llmathphrase();
			while( current == mathphraseStart ) {
				llmathphrase();
			}
		} else error();
		pass(inlineequationEnd);
	} else error();
}

void docbookParser::lltag()
{
	if( current == tagStart ) {
		pass(tagStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(tagEnd);
	} else error();
}

void docbookParser::llmarkup()
{
	if( current == markupStart ) {
		pass(markupStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(markupEnd);
	} else error();
}

void docbookParser::lltoken()
{
	if( current == tokenStart ) {
		pass(tokenStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(tokenEnd);
	} else error();
}

void docbookParser::llsymbol()
{
	if( current == symbolStart ) {
		pass(symbolStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(symbolEnd);
	} else error();
}

void docbookParser::llliteral()
{
	if( current == literalStart ) {
		pass(literalStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(literalEnd);
	} else error();
}

void docbookParser::llcode()
{
	if( current == codeStart ) {
		pass(codeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == parameterStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else error();
		}
		pass(codeEnd);
	} else error();
}

void docbookParser::llconstant()
{
	if( current == constantStart ) {
		pass(constantStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(constantEnd);
	} else error();
}

void docbookParser::llemail()
{
	if( current == emailStart ) {
		pass(emailStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(emailEnd);
	} else error();
}

void docbookParser::lluri()
{
	if( current == uriStart ) {
		pass(uriStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(uriEnd);
	} else error();
}

void docbookParser::llguiicon()
{
	if( current == guiiconStart ) {
		pass(guiiconStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guiiconEnd);
	} else error();
}

void docbookParser::llguibutton()
{
	if( current == guibuttonStart ) {
		pass(guibuttonStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guibuttonEnd);
	} else error();
}

void docbookParser::llguimenuitem()
{
	if( current == guimenuitemStart ) {
		pass(guimenuitemStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guimenuitemEnd);
	} else error();
}

void docbookParser::llguimenu()
{
	if( current == guimenuStart ) {
		pass(guimenuStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guimenuEnd);
	} else error();
}

void docbookParser::llguisubmenu()
{
	if( current == guisubmenuStart ) {
		pass(guisubmenuStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guisubmenuEnd);
	} else error();
}

void docbookParser::llguilabel()
{
	if( current == guilabelStart ) {
		pass(guilabelStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == accelStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == accelStart ) {
				llaccel();
			} else error();
		}
		pass(guilabelEnd);
	} else error();
}

void docbookParser::llmenuchoice()
{
	if( current == menuchoiceStart ) {
		pass(menuchoiceStart);
		if( current == shortcutStart ) {
			llshortcut();
		}
		if( current == guibuttonStart ) {
			llguibutton();
		} else if( current == guiiconStart ) {
			llguiicon();
		} else if( current == guilabelStart ) {
			llguilabel();
		} else if( current == guimenuStart ) {
			llguimenu();
		} else if( current == guimenuitemStart ) {
			llguimenuitem();
		} else if( current == guisubmenuStart ) {
			llguisubmenu();
		} else error();
		while( current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart ) {
			if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else error();
		}
		pass(menuchoiceEnd);
	} else error();
}

void docbookParser::llmousebutton()
{
	if( current == mousebuttonStart ) {
		pass(mousebuttonStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(mousebuttonEnd);
	} else error();
}

void docbookParser::llkeycombo()
{
	if( current == keycomboStart ) {
		pass(keycomboStart);
		if( current == mousebuttonStart ) {
			llmousebutton();
		} else if( current == keycapStart ) {
			llkeycap();
		} else if( current == keycomboStart ) {
			llkeycombo();
		} else if( current == keysymStart ) {
			llkeysym();
		} else error();
		while( current == mousebuttonStart || current == keycapStart || current == keycomboStart || current == keysymStart ) {
			if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else error();
		}
		pass(keycomboEnd);
	} else error();
}

void docbookParser::llkeycap()
{
	if( current == keycapStart ) {
		pass(keycapStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(keycapEnd);
	} else error();
}

void docbookParser::llkeycode()
{
	if( current == keycodeStart ) {
		pass(keycodeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(keycodeEnd);
	} else error();
}

void docbookParser::llkeysym()
{
	if( current == keysymStart ) {
		pass(keysymStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(keysymEnd);
	} else error();
}

void docbookParser::llshortcut()
{
	if( current == shortcutStart ) {
		pass(shortcutStart);
		if( current == mousebuttonStart ) {
			llmousebutton();
		} else if( current == keycapStart ) {
			llkeycap();
		} else if( current == keycomboStart ) {
			llkeycombo();
		} else if( current == keysymStart ) {
			llkeysym();
		} else error();
		while( current == mousebuttonStart || current == keycapStart || current == keycomboStart || current == keysymStart ) {
			if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else error();
		}
		pass(shortcutEnd);
	} else error();
}

void docbookParser::llaccel()
{
	if( current == accelStart ) {
		pass(accelStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(accelEnd);
	} else error();
}

void docbookParser::llprompt()
{
	if( current == promptStart ) {
		pass(promptStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == coStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else error();
		}
		pass(promptEnd);
	} else error();
}

void docbookParser::llenvar()
{
	if( current == envarStart ) {
		pass(envarStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(envarEnd);
	} else error();
}

void docbookParser::llfilename()
{
	if( current == filenameStart ) {
		pass(filenameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(filenameEnd);
	} else error();
}

void docbookParser::llcommand()
{
	if( current == commandStart ) {
		pass(commandStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(commandEnd);
	} else error();
}

void docbookParser::llcomputeroutput()
{
	if( current == computeroutputStart ) {
		pass(computeroutputStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == nonterminalStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(computeroutputEnd);
	} else error();
}

void docbookParser::lluserinput()
{
	if( current == userinputStart ) {
		pass(userinputStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == nonterminalStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(userinputEnd);
	} else error();
}

void docbookParser::llfunction()
{
	if( current == functionStart ) {
		pass(functionStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(functionEnd);
	} else error();
}

void docbookParser::llvarname()
{
	if( current == varnameStart ) {
		pass(varnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(varnameEnd);
	} else error();
}

void docbookParser::llreturnvalue()
{
	if( current == returnvalueStart ) {
		pass(returnvalueStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(returnvalueEnd);
	} else error();
}

void docbookParser::lltype()
{
	if( current == typeStart ) {
		pass(typeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(typeEnd);
	} else error();
}

void docbookParser::llclassname()
{
	if( current == classnameStart ) {
		pass(classnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(classnameEnd);
	} else error();
}

void docbookParser::llexceptionname()
{
	if( current == exceptionnameStart ) {
		pass(exceptionnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(exceptionnameEnd);
	} else error();
}

void docbookParser::llinterfacename()
{
	if( current == interfacenameStart ) {
		pass(interfacenameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(interfacenameEnd);
	} else error();
}

void docbookParser::llmethodname()
{
	if( current == methodnameStart ) {
		pass(methodnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(methodnameEnd);
	} else error();
}

void docbookParser::llmodifier()
{
	if( current == modifierStart ) {
		pass(modifierStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(modifierEnd);
	} else error();
}

void docbookParser::llinitializer()
{
	if( current == initializerStart ) {
		pass(initializerStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(initializerEnd);
	} else error();
}

void docbookParser::llooclass()
{
	if( current == ooclassStart ) {
		pass(ooclassStart);
		while( current == packageStart || current == modifierStart ) {
			if( current == packageStart ) {
				llpackage();
			} else if( current == modifierStart ) {
				llmodifier();
			} else error();
		}
		llclassname();
		pass(ooclassEnd);
	} else error();
}

void docbookParser::llooexception()
{
	if( current == ooexceptionStart ) {
		pass(ooexceptionStart);
		while( current == packageStart || current == modifierStart ) {
			if( current == packageStart ) {
				llpackage();
			} else if( current == modifierStart ) {
				llmodifier();
			} else error();
		}
		llexceptionname();
		pass(ooexceptionEnd);
	} else error();
}

void docbookParser::lloointerface()
{
	if( current == oointerfaceStart ) {
		pass(oointerfaceStart);
		while( current == packageStart || current == modifierStart ) {
			if( current == packageStart ) {
				llpackage();
			} else if( current == modifierStart ) {
				llmodifier();
			} else error();
		}
		llinterfacename();
		pass(oointerfaceEnd);
	} else error();
}

void docbookParser::llerrorcode()
{
	if( current == errorcodeStart ) {
		pass(errorcodeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(errorcodeEnd);
	} else error();
}

void docbookParser::llerrortext()
{
	if( current == errortextStart ) {
		pass(errortextStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(errortextEnd);
	} else error();
}

void docbookParser::llerrorname()
{
	if( current == errornameStart ) {
		pass(errornameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(errornameEnd);
	} else error();
}

void docbookParser::llerrortype()
{
	if( current == errortypeStart ) {
		pass(errortypeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(errortypeEnd);
	} else error();
}

void docbookParser::lltitleabbrev()
{
	if( current == titleabbrevStart ) {
		pass(titleabbrevStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(titleabbrevEnd);
	} else error();
}

void docbookParser::llsubtitle()
{
	if( current == subtitleStart ) {
		pass(subtitleStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(subtitleEnd);
	} else error();
}

void docbookParser::llinfo()
{
	if( current == infoStart ) {
		pass(infoStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart || current == subjectsetStart || current == keywordsetStart || current == abstractStart || current == mediaobjectStart || current == addressStart || current == orgnameStart || current == artpagenumsStart || current == authorStart || current == authorgroupStart || current == collabStart || current == authorinitialsStart || current == orgStart || current == confgroupStart || current == contractnumStart || current == contractsponsorStart || current == copyrightStart || current == coverStart || current == dateStart || current == editionStart || current == editorStart || current == biblioidStart || current == bibliosourceStart || current == bibliorelationStart || current == bibliocoverageStart || current == legalnoticeStart || current == othercreditStart || current == pagenumsStart || current == printhistoryStart || current == pubdateStart || current == publisherStart || current == publishernameStart || current == releaseinfoStart || current == revhistoryStart || current == seriesvolnumsStart || current == volumenumStart || current == issuenumStart || current == annotationStart || current == extendedlinkStart || current == bibliosetStart || current == bibliomsetStart || current == bibliomiscStart || current == itermsetStart || current == productnameStart || current == productnumberStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else if( current == subjectsetStart ) {
				llsubjectset();
			} else if( current == keywordsetStart ) {
				llkeywordset();
			} else if( current == abstractStart ) {
				llabstract();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == artpagenumsStart ) {
				llartpagenums();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == authorgroupStart ) {
				llauthorgroup();
			} else if( current == collabStart ) {
				llcollab();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == confgroupStart ) {
				llconfgroup();
			} else if( current == contractnumStart ) {
				llcontractnum();
			} else if( current == contractsponsorStart ) {
				llcontractsponsor();
			} else if( current == copyrightStart ) {
				llcopyright();
			} else if( current == coverStart ) {
				llcover();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editionStart ) {
				lledition();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == biblioidStart ) {
				llbiblioid();
			} else if( current == bibliosourceStart ) {
				llbibliosource();
			} else if( current == bibliorelationStart ) {
				llbibliorelation();
			} else if( current == bibliocoverageStart ) {
				llbibliocoverage();
			} else if( current == legalnoticeStart ) {
				lllegalnotice();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else if( current == pagenumsStart ) {
				llpagenums();
			} else if( current == printhistoryStart ) {
				llprinthistory();
			} else if( current == pubdateStart ) {
				llpubdate();
			} else if( current == publisherStart ) {
				llpublisher();
			} else if( current == publishernameStart ) {
				llpublishername();
			} else if( current == releaseinfoStart ) {
				llreleaseinfo();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == seriesvolnumsStart ) {
				llseriesvolnums();
			} else if( current == volumenumStart ) {
				llvolumenum();
			} else if( current == issuenumStart ) {
				llissuenum();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == extendedlinkStart ) {
				llextendedlink();
			} else if( current == bibliosetStart ) {
				llbiblioset();
			} else if( current == bibliomsetStart ) {
				llbibliomset();
			} else if( current == bibliomiscStart ) {
				llbibliomisc();
			} else if( current == itermsetStart ) {
				llitermset();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else error();
		}
		pass(infoEnd);
	} else error();
}

void docbookParser::llabstract()
{
	if( current == abstractStart ) {
		pass(abstractStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == anchorStart ) {
			llanchor();
		} else error();
		while( current == formalparaStart || current == paraStart || current == simparaStart || current == anchorStart ) {
			if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == anchorStart ) {
				llanchor();
			} else error();
		}
		pass(abstractEnd);
	} else error();
}

void docbookParser::lladdress()
{
	if( current == addressStart ) {
		pass(addressStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == streetStart || current == pobStart || current == postcodeStart || current == cityStart || current == stateStart || current == countryStart || current == phoneStart || current == faxStart || current == otheraddrStart || current == personnameStart || current == emailStart || current == replaceableStart || current == uriStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == streetStart ) {
				llstreet();
			} else if( current == pobStart ) {
				llpob();
			} else if( current == postcodeStart ) {
				llpostcode();
			} else if( current == cityStart ) {
				llcity();
			} else if( current == stateStart ) {
				llstate();
			} else if( current == countryStart ) {
				llcountry();
			} else if( current == phoneStart ) {
				llphone();
			} else if( current == faxStart ) {
				llfax();
			} else if( current == otheraddrStart ) {
				llotheraddr();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(addressEnd);
	} else error();
}

void docbookParser::llartpagenums()
{
	if( current == artpagenumsStart ) {
		pass(artpagenumsStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(artpagenumsEnd);
	} else error();
}

void docbookParser::llauthorgroup()
{
	if( current == authorgroupStart ) {
		pass(authorgroupStart);
		if( current == authorStart ) {
			llauthor();
		} else if( current == editorStart ) {
			lleditor();
		} else if( current == othercreditStart ) {
			llothercredit();
		} else error();
		while( current == authorStart || current == editorStart || current == othercreditStart ) {
			if( current == authorStart ) {
				llauthor();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else error();
		}
		pass(authorgroupEnd);
	} else error();
}

void docbookParser::llauthorinitials()
{
	if( current == authorinitialsStart ) {
		pass(authorinitialsStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(authorinitialsEnd);
	} else error();
}

void docbookParser::llbibliocoverage()
{
	if( current == bibliocoverageStart ) {
		pass(bibliocoverageStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(bibliocoverageEnd);
	} else error();
}

void docbookParser::llbiblioid()
{
	if( current == biblioidStart ) {
		pass(biblioidStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(biblioidEnd);
	} else error();
}

void docbookParser::llbibliosource()
{
	if( current == bibliosourceStart ) {
		pass(bibliosourceStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(bibliosourceEnd);
	} else error();
}

void docbookParser::llcollab()
{
	if( current == collabStart ) {
		pass(collabStart);
		if( current == orgnameStart ) {
			llorgname();
		} else if( current == personnameStart ) {
			llpersonname();
		} else if( current == personStart ) {
			llperson();
		} else if( current == orgStart ) {
			llorg();
		} else error();
		while( current == orgnameStart || current == personnameStart || current == personStart || current == orgStart ) {
			if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else error();
		}
		while( current == affiliationStart ) {
			llaffiliation();
		}
		pass(collabEnd);
	} else error();
}

void docbookParser::llconfgroup()
{
	if( current == confgroupStart ) {
		pass(confgroupStart);
		while( current == addressStart || current == confdatesStart || current == conftitleStart || current == confnumStart || current == confsponsorStart ) {
			if( current == addressStart ) {
				lladdress();
			} else if( current == confdatesStart ) {
				llconfdates();
			} else if( current == conftitleStart ) {
				llconftitle();
			} else if( current == confnumStart ) {
				llconfnum();
			} else if( current == confsponsorStart ) {
				llconfsponsor();
			} else error();
		}
		pass(confgroupEnd);
	} else error();
}

void docbookParser::llcontractsponsor()
{
	if( current == contractsponsorStart ) {
		pass(contractsponsorStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(contractsponsorEnd);
	} else error();
}

void docbookParser::llcontractnum()
{
	if( current == contractnumStart ) {
		pass(contractnumStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(contractnumEnd);
	} else error();
}

void docbookParser::llcopyright()
{
	if( current == copyrightStart ) {
		pass(copyrightStart);
		llyear();
		while( current == yearStart ) {
			llyear();
		}
		while( current == holderStart ) {
			llholder();
		}
		pass(copyrightEnd);
	} else error();
}

void docbookParser::llcover()
{
	if( current == coverStart ) {
		pass(coverStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == glosslistStart || current == bibliolistStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else error();
		}
		pass(coverEnd);
	} else error();
}

void docbookParser::lledition()
{
	if( current == editionStart ) {
		pass(editionStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(editionEnd);
	} else error();
}

void docbookParser::llissuenum()
{
	if( current == issuenumStart ) {
		pass(issuenumStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(issuenumEnd);
	} else error();
}

void docbookParser::llkeywordset()
{
	if( current == keywordsetStart ) {
		pass(keywordsetStart);
		llkeyword();
		while( current == keywordStart ) {
			llkeyword();
		}
		pass(keywordsetEnd);
	} else error();
}

void docbookParser::lllegalnotice()
{
	if( current == legalnoticeStart ) {
		pass(legalnoticeStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(legalnoticeEnd);
	} else error();
}

void docbookParser::llmediaobject()
{
	if( current == mediaobjectStart ) {
		pass(mediaobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == altStart ) {
			llalt();
		}
		if( current == videoobjectStart ) {
			llvideoobject();
		} else if( current == audioobjectStart ) {
			llaudioobject();
		} else if( current == imageobjectStart ) {
			llimageobject();
		} else if( current == textobjectStart ) {
			lltextobject();
		} else if( current == imageobjectcoStart ) {
			llimageobjectco();
		} else error();
		while( current == videoobjectStart || current == audioobjectStart || current == imageobjectStart || current == textobjectStart || current == imageobjectcoStart ) {
			if( current == videoobjectStart ) {
				llvideoobject();
			} else if( current == audioobjectStart ) {
				llaudioobject();
			} else if( current == imageobjectStart ) {
				llimageobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == imageobjectcoStart ) {
				llimageobjectco();
			} else error();
		}
		if( current == captionStart ) {
			llcaption();
		}
		pass(mediaobjectEnd);
	} else error();
}

void docbookParser::llothercredit()
{
	if( current == othercreditStart ) {
		pass(othercreditStart);
		if( current == orgnameStart ) {
			llorgname();
			while( current == addressStart || current == affiliationStart || current == orgdivStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == orgdivStart ) {
					llorgdiv();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else if( current == personnameStart ) {
			llpersonname();
			while( current == personblurbStart || current == addressStart || current == affiliationStart || current == contribStart || current == emailStart || current == uriStart ) {
				if( current == personblurbStart ) {
					llpersonblurb();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == affiliationStart ) {
					llaffiliation();
				} else if( current == contribStart ) {
					llcontrib();
				} else if( current == emailStart ) {
					llemail();
				} else if( current == uriStart ) {
					lluri();
				} else error();
			}
		} else error();
		pass(othercreditEnd);
	} else error();
}

void docbookParser::llpagenums()
{
	if( current == pagenumsStart ) {
		pass(pagenumsStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(pagenumsEnd);
	} else error();
}

void docbookParser::llprinthistory()
{
	if( current == printhistoryStart ) {
		pass(printhistoryStart);
		if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == anchorStart ) {
			llanchor();
		} else error();
		while( current == formalparaStart || current == paraStart || current == simparaStart || current == anchorStart ) {
			if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == anchorStart ) {
				llanchor();
			} else error();
		}
		pass(printhistoryEnd);
	} else error();
}

void docbookParser::llpubdate()
{
	if( current == pubdateStart ) {
		pass(pubdateStart);
		pass(pubdateEnd);
	} else error();
}

void docbookParser::llpublisher()
{
	if( current == publisherStart ) {
		pass(publisherStart);
		llpublishername();
		while( current == addressStart ) {
			lladdress();
		}
		pass(publisherEnd);
	} else error();
}

void docbookParser::llpublishername()
{
	if( current == publishernameStart ) {
		pass(publishernameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(publishernameEnd);
	} else error();
}

void docbookParser::llreleaseinfo()
{
	if( current == releaseinfoStart ) {
		pass(releaseinfoStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(releaseinfoEnd);
	} else error();
}

void docbookParser::llrevhistory()
{
	if( current == revhistoryStart ) {
		pass(revhistoryStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llrevision();
		while( current == revisionStart ) {
			llrevision();
		}
		pass(revhistoryEnd);
	} else error();
}

void docbookParser::llseriesvolnums()
{
	if( current == seriesvolnumsStart ) {
		pass(seriesvolnumsStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(seriesvolnumsEnd);
	} else error();
}

void docbookParser::llsubjectset()
{
	if( current == subjectsetStart ) {
		pass(subjectsetStart);
		llsubject();
		while( current == subjectStart ) {
			llsubject();
		}
		pass(subjectsetEnd);
	} else error();
}

void docbookParser::llvolumenum()
{
	if( current == volumenumStart ) {
		pass(volumenumStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(volumenumEnd);
	} else error();
}

void docbookParser::llextendedlink()
{
	if( current == extendedlinkStart ) {
		pass(extendedlinkStart);
		if( current == locatorStart ) {
			lllocator();
		} else if( current == arcStart ) {
			llarc();
		} else error();
		while( current == locatorStart || current == arcStart ) {
			if( current == locatorStart ) {
				lllocator();
			} else if( current == arcStart ) {
				llarc();
			} else error();
		}
		pass(extendedlinkEnd);
	} else error();
}

void docbookParser::llbibliomisc()
{
	if( current == bibliomiscStart ) {
		pass(bibliomiscStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(bibliomiscEnd);
	} else error();
}

void docbookParser::llbibliomset()
{
	if( current == bibliomsetStart ) {
		pass(bibliomsetStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart || current == subjectsetStart || current == keywordsetStart || current == abstractStart || current == personblurbStart || current == remarkStart || current == footnoteStart || current == mediaobjectStart || current == inlinemediaobjectStart || current == addressStart || current == orgnameStart || current == artpagenumsStart || current == personnameStart || current == authorStart || current == authorgroupStart || current == collabStart || current == authorinitialsStart || current == personStart || current == orgStart || current == confgroupStart || current == contractnumStart || current == contractsponsorStart || current == copyrightStart || current == coverStart || current == dateStart || current == editionStart || current == editorStart || current == biblioidStart || current == citebiblioidStart || current == bibliosourceStart || current == bibliorelationStart || current == bibliocoverageStart || current == legalnoticeStart || current == othercreditStart || current == pagenumsStart || current == printhistoryStart || current == pubdateStart || current == publisherStart || current == publishernameStart || current == releaseinfoStart || current == revhistoryStart || current == seriesvolnumsStart || current == volumenumStart || current == issuenumStart || current == replaceableStart || current == abbrevStart || current == acronymStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == extendedlinkStart || current == firsttermStart || current == glosstermStart || current == bibliosetStart || current == bibliomsetStart || current == bibliomiscStart || current == bibliorefStart || current == itermsetStart || current == indextermStart || current == corefStart || current == productnameStart || current == productnumberStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else if( current == subjectsetStart ) {
				llsubjectset();
			} else if( current == keywordsetStart ) {
				llkeywordset();
			} else if( current == abstractStart ) {
				llabstract();
			} else if( current == personblurbStart ) {
				llpersonblurb();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == artpagenumsStart ) {
				llartpagenums();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == authorgroupStart ) {
				llauthorgroup();
			} else if( current == collabStart ) {
				llcollab();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == confgroupStart ) {
				llconfgroup();
			} else if( current == contractnumStart ) {
				llcontractnum();
			} else if( current == contractsponsorStart ) {
				llcontractsponsor();
			} else if( current == copyrightStart ) {
				llcopyright();
			} else if( current == coverStart ) {
				llcover();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editionStart ) {
				lledition();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == biblioidStart ) {
				llbiblioid();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == bibliosourceStart ) {
				llbibliosource();
			} else if( current == bibliorelationStart ) {
				llbibliorelation();
			} else if( current == bibliocoverageStart ) {
				llbibliocoverage();
			} else if( current == legalnoticeStart ) {
				lllegalnotice();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else if( current == pagenumsStart ) {
				llpagenums();
			} else if( current == printhistoryStart ) {
				llprinthistory();
			} else if( current == pubdateStart ) {
				llpubdate();
			} else if( current == publisherStart ) {
				llpublisher();
			} else if( current == publishernameStart ) {
				llpublishername();
			} else if( current == releaseinfoStart ) {
				llreleaseinfo();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == seriesvolnumsStart ) {
				llseriesvolnums();
			} else if( current == volumenumStart ) {
				llvolumenum();
			} else if( current == issuenumStart ) {
				llissuenum();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == extendedlinkStart ) {
				llextendedlink();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == bibliosetStart ) {
				llbiblioset();
			} else if( current == bibliomsetStart ) {
				llbibliomset();
			} else if( current == bibliomiscStart ) {
				llbibliomisc();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == itermsetStart ) {
				llitermset();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else error();
		}
		pass(bibliomsetEnd);
	} else error();
}

void docbookParser::llbibliorelation()
{
	if( current == bibliorelationStart ) {
		pass(bibliorelationStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(bibliorelationEnd);
	} else error();
}

void docbookParser::llbiblioset()
{
	if( current == bibliosetStart ) {
		pass(bibliosetStart);
		if( current == titleStart ) {
			lltitle();
		} else if( current == titleabbrevStart ) {
			lltitleabbrev();
		} else if( current == subtitleStart ) {
			llsubtitle();
		} else if( current == subjectsetStart ) {
			llsubjectset();
		} else if( current == keywordsetStart ) {
			llkeywordset();
		} else if( current == abstractStart ) {
			llabstract();
		} else if( current == personblurbStart ) {
			llpersonblurb();
		} else if( current == footnoteStart ) {
			llfootnote();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == orgnameStart ) {
			llorgname();
		} else if( current == artpagenumsStart ) {
			llartpagenums();
		} else if( current == personnameStart ) {
			llpersonname();
		} else if( current == authorStart ) {
			llauthor();
		} else if( current == authorgroupStart ) {
			llauthorgroup();
		} else if( current == collabStart ) {
			llcollab();
		} else if( current == authorinitialsStart ) {
			llauthorinitials();
		} else if( current == personStart ) {
			llperson();
		} else if( current == orgStart ) {
			llorg();
		} else if( current == confgroupStart ) {
			llconfgroup();
		} else if( current == contractnumStart ) {
			llcontractnum();
		} else if( current == contractsponsorStart ) {
			llcontractsponsor();
		} else if( current == copyrightStart ) {
			llcopyright();
		} else if( current == coverStart ) {
			llcover();
		} else if( current == dateStart ) {
			lldate();
		} else if( current == editionStart ) {
			lledition();
		} else if( current == editorStart ) {
			lleditor();
		} else if( current == biblioidStart ) {
			llbiblioid();
		} else if( current == citebiblioidStart ) {
			llcitebiblioid();
		} else if( current == bibliosourceStart ) {
			llbibliosource();
		} else if( current == bibliorelationStart ) {
			llbibliorelation();
		} else if( current == bibliocoverageStart ) {
			llbibliocoverage();
		} else if( current == legalnoticeStart ) {
			lllegalnotice();
		} else if( current == othercreditStart ) {
			llothercredit();
		} else if( current == pagenumsStart ) {
			llpagenums();
		} else if( current == printhistoryStart ) {
			llprinthistory();
		} else if( current == pubdateStart ) {
			llpubdate();
		} else if( current == publisherStart ) {
			llpublisher();
		} else if( current == publishernameStart ) {
			llpublishername();
		} else if( current == releaseinfoStart ) {
			llreleaseinfo();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == seriesvolnumsStart ) {
			llseriesvolnums();
		} else if( current == volumenumStart ) {
			llvolumenum();
		} else if( current == issuenumStart ) {
			llissuenum();
		} else if( current == abbrevStart ) {
			llabbrev();
		} else if( current == acronymStart ) {
			llacronym();
		} else if( current == citerefentryStart ) {
			llciterefentry();
		} else if( current == citetitleStart ) {
			llcitetitle();
		} else if( current == emphasisStart ) {
			llemphasis();
		} else if( current == foreignphraseStart ) {
			llforeignphrase();
		} else if( current == phraseStart ) {
			llphrase();
		} else if( current == quoteStart ) {
			llquote();
		} else if( current == subscriptStart ) {
			llsubscript();
		} else if( current == superscriptStart ) {
			llsuperscript();
		} else if( current == wordaswordStart ) {
			llwordasword();
		} else if( current == footnoterefStart ) {
			llfootnoteref();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == extendedlinkStart ) {
			llextendedlink();
		} else if( current == firsttermStart ) {
			llfirstterm();
		} else if( current == glosstermStart ) {
			llglossterm();
		} else if( current == bibliosetStart ) {
			llbiblioset();
		} else if( current == bibliomsetStart ) {
			llbibliomset();
		} else if( current == bibliomiscStart ) {
			llbibliomisc();
		} else if( current == itermsetStart ) {
			llitermset();
		} else if( current == corefStart ) {
			llcoref();
		} else if( current == productnameStart ) {
			llproductname();
		} else if( current == productnumberStart ) {
			llproductnumber();
		} else error();
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart || current == subjectsetStart || current == keywordsetStart || current == abstractStart || current == personblurbStart || current == footnoteStart || current == mediaobjectStart || current == addressStart || current == orgnameStart || current == artpagenumsStart || current == personnameStart || current == authorStart || current == authorgroupStart || current == collabStart || current == authorinitialsStart || current == personStart || current == orgStart || current == confgroupStart || current == contractnumStart || current == contractsponsorStart || current == copyrightStart || current == coverStart || current == dateStart || current == editionStart || current == editorStart || current == biblioidStart || current == citebiblioidStart || current == bibliosourceStart || current == bibliorelationStart || current == bibliocoverageStart || current == legalnoticeStart || current == othercreditStart || current == pagenumsStart || current == printhistoryStart || current == pubdateStart || current == publisherStart || current == publishernameStart || current == releaseinfoStart || current == revhistoryStart || current == seriesvolnumsStart || current == volumenumStart || current == issuenumStart || current == abbrevStart || current == acronymStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == wordaswordStart || current == footnoterefStart || current == annotationStart || current == extendedlinkStart || current == firsttermStart || current == glosstermStart || current == bibliosetStart || current == bibliomsetStart || current == bibliomiscStart || current == itermsetStart || current == corefStart || current == productnameStart || current == productnumberStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else if( current == subjectsetStart ) {
				llsubjectset();
			} else if( current == keywordsetStart ) {
				llkeywordset();
			} else if( current == abstractStart ) {
				llabstract();
			} else if( current == personblurbStart ) {
				llpersonblurb();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == artpagenumsStart ) {
				llartpagenums();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == authorgroupStart ) {
				llauthorgroup();
			} else if( current == collabStart ) {
				llcollab();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == confgroupStart ) {
				llconfgroup();
			} else if( current == contractnumStart ) {
				llcontractnum();
			} else if( current == contractsponsorStart ) {
				llcontractsponsor();
			} else if( current == copyrightStart ) {
				llcopyright();
			} else if( current == coverStart ) {
				llcover();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editionStart ) {
				lledition();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == biblioidStart ) {
				llbiblioid();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == bibliosourceStart ) {
				llbibliosource();
			} else if( current == bibliorelationStart ) {
				llbibliorelation();
			} else if( current == bibliocoverageStart ) {
				llbibliocoverage();
			} else if( current == legalnoticeStart ) {
				lllegalnotice();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else if( current == pagenumsStart ) {
				llpagenums();
			} else if( current == printhistoryStart ) {
				llprinthistory();
			} else if( current == pubdateStart ) {
				llpubdate();
			} else if( current == publisherStart ) {
				llpublisher();
			} else if( current == publishernameStart ) {
				llpublishername();
			} else if( current == releaseinfoStart ) {
				llreleaseinfo();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == seriesvolnumsStart ) {
				llseriesvolnums();
			} else if( current == volumenumStart ) {
				llvolumenum();
			} else if( current == issuenumStart ) {
				llissuenum();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == extendedlinkStart ) {
				llextendedlink();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == bibliosetStart ) {
				llbiblioset();
			} else if( current == bibliomsetStart ) {
				llbibliomset();
			} else if( current == bibliomiscStart ) {
				llbibliomisc();
			} else if( current == itermsetStart ) {
				llitermset();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else error();
		}
		pass(bibliosetEnd);
	} else error();
}

void docbookParser::llitermset()
{
	if( current == itermsetStart ) {
		pass(itermsetStart);
		llindexterm();
		while( current == indextermStart ) {
			llindexterm();
		}
		pass(itermsetEnd);
	} else error();
}

void docbookParser::llsubject()
{
	if( current == subjectStart ) {
		pass(subjectStart);
		llsubjectterm();
		while( current == subjecttermStart ) {
			llsubjectterm();
		}
		pass(subjectEnd);
	} else error();
}

void docbookParser::llsubjectterm()
{
	if( current == subjecttermStart ) {
		pass(subjecttermStart);
		pass(subjecttermEnd);
	} else error();
}

void docbookParser::llkeyword()
{
	if( current == keywordStart ) {
		pass(keywordStart);
		pass(keywordEnd);
	} else error();
}

void docbookParser::llprocedure()
{
	if( current == procedureStart ) {
		pass(procedureStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		llstep();
		while( current == stepStart ) {
			llstep();
		}
		pass(procedureEnd);
	} else error();
}

void docbookParser::llitemizedlist()
{
	if( current == itemizedlistStart ) {
		pass(itemizedlistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		lllistitem();
		while( current == listitemStart ) {
			lllistitem();
		}
		pass(itemizedlistEnd);
	} else error();
}

void docbookParser::llorderedlist()
{
	if( current == orderedlistStart ) {
		pass(orderedlistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		lllistitem();
		while( current == listitemStart ) {
			lllistitem();
		}
		pass(orderedlistEnd);
	} else error();
}

void docbookParser::llsimplelist()
{
	if( current == simplelistStart ) {
		pass(simplelistStart);
		llmember();
		while( current == memberStart ) {
			llmember();
		}
		pass(simplelistEnd);
	} else error();
}

void docbookParser::llvariablelist()
{
	if( current == variablelistStart ) {
		pass(variablelistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		llvarlistentry();
		while( current == varlistentryStart ) {
			llvarlistentry();
		}
		pass(variablelistEnd);
	} else error();
}

void docbookParser::llsegmentedlist()
{
	if( current == segmentedlistStart ) {
		pass(segmentedlistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llsegtitle();
		while( current == segtitleStart ) {
			llsegtitle();
		}
		llseglistitem();
		while( current == seglistitemStart ) {
			llseglistitem();
		}
		pass(segmentedlistEnd);
	} else error();
}

void docbookParser::llglosslist()
{
	if( current == glosslistStart ) {
		pass(glosslistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		llglossentry();
		while( current == glossentryStart ) {
			llglossentry();
		}
		pass(glosslistEnd);
	} else error();
}

void docbookParser::llbibliolist()
{
	if( current == bibliolistStart ) {
		pass(bibliolistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == biblioentryStart ) {
			llbiblioentry();
		} else if( current == bibliomixedStart ) {
			llbibliomixed();
		} else error();
		while( current == biblioentryStart || current == bibliomixedStart ) {
			if( current == biblioentryStart ) {
				llbiblioentry();
			} else if( current == bibliomixedStart ) {
				llbibliomixed();
			} else error();
		}
		pass(bibliolistEnd);
	} else error();
}

void docbookParser::llcalloutlist()
{
	if( current == calloutlistStart ) {
		pass(calloutlistStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		llcallout();
		while( current == calloutStart ) {
			llcallout();
		}
		pass(calloutlistEnd);
	} else error();
}

void docbookParser::llqandaset()
{
	if( current == qandasetStart ) {
		pass(qandasetStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == qandadivStart ) {
			llqandadiv();
			while( current == qandadivStart ) {
				llqandadiv();
			}
		} else if( current == qandaentryStart ) {
			llqandaentry();
			while( current == qandaentryStart ) {
				llqandaentry();
			}
		} else error();
		pass(qandasetEnd);
	} else error();
}

void docbookParser::llexample()
{
	if( current == exampleStart ) {
		pass(exampleStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == captionStart ) {
			llcaption();
		}
		pass(exampleEnd);
	} else error();
}

void docbookParser::llfigure()
{
	if( current == figureStart ) {
		pass(figureStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == captionStart ) {
			llcaption();
		}
		pass(figureEnd);
	} else error();
}

void docbookParser::lltable()
{
	if( current == tableStart ) {
		pass(tableStart);
		if( current == titleStart || current == infoStart ) {
			if( current == infoStart ) {
				llinfo();
			}
			lltitle();
			if( current == titleabbrevStart ) {
				lltitleabbrev();
			}
			while( current == indextermStart ) {
				llindexterm();
			}
			while( current == textobjectStart ) {
				lltextobject();
			}
			if( current == mediaobjectStart ) {
				llmediaobject();
				while( current == mediaobjectStart ) {
					llmediaobject();
				}
			} else if( current == tgroupStart ) {
				lltgroup();
				while( current == tgroupStart ) {
					lltgroup();
				}
			} else error();
		} else if( current == captionStart ) {
			llcaption();
			while( current == colStart ) {
				llcol();
			}
			while( current == colgroupStart ) {
				llcolgroup();
			}
			if( current == theadStart ) {
				llthead();
			}
			if( current == tfootStart ) {
				lltfoot();
			}
			if( current == tbodyStart ) {
				lltbody();
				while( current == tbodyStart ) {
					lltbody();
				}
			} else if( current == trStart ) {
				lltr();
				while( current == trStart ) {
					lltr();
				}
			} else error();
		} else error();
		pass(tableEnd);
	} else error();
}

void docbookParser::llequation()
{
	if( current == equationStart ) {
		pass(equationStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == altStart ) {
			llalt();
		}
		if( current == mediaobjectStart ) {
			llmediaobject();
			while( current == mediaobjectStart ) {
				llmediaobject();
			}
		} else if( current == mathphraseStart ) {
			llmathphrase();
			while( current == mathphraseStart ) {
				llmathphrase();
			}
		} else error();
		if( current == captionStart ) {
			llcaption();
		}
		pass(equationEnd);
	} else error();
}

void docbookParser::llinformalexample()
{
	if( current == informalexampleStart ) {
		pass(informalexampleStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == captionStart ) {
			llcaption();
		}
		pass(informalexampleEnd);
	} else error();
}

void docbookParser::llinformalfigure()
{
	if( current == informalfigureStart ) {
		pass(informalfigureStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == captionStart ) {
			llcaption();
		}
		pass(informalfigureEnd);
	} else error();
}

void docbookParser::llinformaltable()
{
	if( current == informaltableStart ) {
		pass(informaltableStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == mediaobjectStart || current == textobjectStart || current == tgroupStart ) {
			while( current == textobjectStart ) {
				lltextobject();
			}
			if( current == mediaobjectStart ) {
				llmediaobject();
				while( current == mediaobjectStart ) {
					llmediaobject();
				}
			} else if( current == tgroupStart ) {
				lltgroup();
				while( current == tgroupStart ) {
					lltgroup();
				}
			} else error();
		} else if( current == theadStart || current == tfootStart || current == tbodyStart || current == colStart || current == colgroupStart || current == trStart ) {
			while( current == colStart ) {
				llcol();
			}
			while( current == colgroupStart ) {
				llcolgroup();
			}
			if( current == theadStart ) {
				llthead();
			}
			if( current == tfootStart ) {
				lltfoot();
			}
			if( current == tbodyStart ) {
				lltbody();
				while( current == tbodyStart ) {
					lltbody();
				}
			} else if( current == trStart ) {
				lltr();
				while( current == trStart ) {
					lltr();
				}
			} else error();
		} else error();
		pass(informaltableEnd);
	} else error();
}

void docbookParser::llinformalequation()
{
	if( current == informalequationStart ) {
		pass(informalequationStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == altStart ) {
			llalt();
		}
		if( current == mediaobjectStart ) {
			llmediaobject();
			while( current == mediaobjectStart ) {
				llmediaobject();
			}
		} else if( current == mathphraseStart ) {
			llmathphrase();
			while( current == mathphraseStart ) {
				llmathphrase();
			}
		} else error();
		if( current == captionStart ) {
			llcaption();
		}
		pass(informalequationEnd);
	} else error();
}

void docbookParser::llsidebar()
{
	if( current == sidebarStart ) {
		pass(sidebarStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(sidebarEnd);
	} else error();
}

void docbookParser::llblockquote()
{
	if( current == blockquoteStart ) {
		pass(blockquoteStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == attributionStart ) {
			llattribution();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(blockquoteEnd);
	} else error();
}

void docbookParser::llepigraph()
{
	if( current == epigraphStart ) {
		pass(epigraphStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == attributionStart ) {
			llattribution();
		}
		if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == anchorStart ) {
			llanchor();
		} else error();
		while( current == formalparaStart || current == paraStart || current == simparaStart || current == literallayoutStart || current == anchorStart ) {
			if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == anchorStart ) {
				llanchor();
			} else error();
		}
		pass(epigraphEnd);
	} else error();
}

void docbookParser::llscreenshot()
{
	if( current == screenshotStart ) {
		pass(screenshotStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llmediaobject();
		pass(screenshotEnd);
	} else error();
}

void docbookParser::lltask()
{
	if( current == taskStart ) {
		pass(taskStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == tasksummaryStart ) {
			lltasksummary();
		}
		if( current == taskprerequisitesStart ) {
			lltaskprerequisites();
		}
		llprocedure();
		while( current == exampleStart ) {
			llexample();
		}
		if( current == taskrelatedStart ) {
			lltaskrelated();
		}
		pass(taskEnd);
	} else error();
}

void docbookParser::llproductionset()
{
	if( current == productionsetStart ) {
		pass(productionsetStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == productionStart ) {
			llproduction();
		} else if( current == productionrecapStart ) {
			llproductionrecap();
		} else error();
		while( current == productionStart || current == productionrecapStart ) {
			if( current == productionStart ) {
				llproduction();
			} else if( current == productionrecapStart ) {
				llproductionrecap();
			} else error();
		}
		pass(productionsetEnd);
	} else error();
}

void docbookParser::llconstraintdef()
{
	if( current == constraintdefStart ) {
		pass(constraintdefStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(constraintdefEnd);
	} else error();
}

void docbookParser::llmsgset()
{
	if( current == msgsetStart ) {
		pass(msgsetStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == msgentryStart ) {
			llmsgentry();
			while( current == msgentryStart ) {
				llmsgentry();
			}
		} else if( current == simplemsgentryStart ) {
			llsimplemsgentry();
			while( current == simplemsgentryStart ) {
				llsimplemsgentry();
			}
		} else error();
		pass(msgsetEnd);
	} else error();
}

void docbookParser::llscreen()
{
	if( current == screenStart ) {
		pass(screenStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(screenEnd);
	} else error();
}

void docbookParser::llliterallayout()
{
	if( current == literallayoutStart ) {
		pass(literallayoutStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(literallayoutEnd);
	} else error();
}

void docbookParser::llprogramlistingco()
{
	if( current == programlistingcoStart ) {
		pass(programlistingcoStart);
		if( current == infoStart ) {
			llinfo();
		}
		llareaspec();
		llprogramlisting();
		while( current == calloutlistStart ) {
			llcalloutlist();
		}
		pass(programlistingcoEnd);
	} else error();
}

void docbookParser::llscreenco()
{
	if( current == screencoStart ) {
		pass(screencoStart);
		if( current == infoStart ) {
			llinfo();
		}
		llareaspec();
		llscreen();
		while( current == calloutlistStart ) {
			llcalloutlist();
		}
		pass(screencoEnd);
	} else error();
}

void docbookParser::llprogramlisting()
{
	if( current == programlistingStart ) {
		pass(programlistingStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(programlistingEnd);
	} else error();
}

void docbookParser::llsynopsis()
{
	if( current == synopsisStart ) {
		pass(synopsisStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(synopsisEnd);
	} else error();
}

void docbookParser::llbridgehead()
{
	if( current == bridgeheadStart ) {
		pass(bridgeheadStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(bridgeheadEnd);
	} else error();
}

void docbookParser::llfuncsynopsis()
{
	if( current == funcsynopsisStart ) {
		pass(funcsynopsisStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == funcsynopsisinfoStart ) {
			llfuncsynopsisinfo();
		} else if( current == funcprototypeStart ) {
			llfuncprototype();
		} else error();
		while( current == funcsynopsisinfoStart || current == funcprototypeStart ) {
			if( current == funcsynopsisinfoStart ) {
				llfuncsynopsisinfo();
			} else if( current == funcprototypeStart ) {
				llfuncprototype();
			} else error();
		}
		pass(funcsynopsisEnd);
	} else error();
}

void docbookParser::llclasssynopsis()
{
	if( current == classsynopsisStart ) {
		pass(classsynopsisStart);
		if( current == ooclassStart ) {
			llooclass();
		} else if( current == oointerfaceStart ) {
			lloointerface();
		} else if( current == ooexceptionStart ) {
			llooexception();
		} else error();
		while( current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart ) {
			if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else error();
		}
		while( current == classsynopsisinfoStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart ) {
			if( current == classsynopsisinfoStart ) {
				llclasssynopsisinfo();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else error();
		}
		pass(classsynopsisEnd);
	} else error();
}

void docbookParser::llmethodsynopsis()
{
	if( current == methodsynopsisStart ) {
		pass(methodsynopsisStart);
		while( current == modifierStart ) {
			llmodifier();
		}
		if( current == voidStart || current == typeStart ) {
			if( current == voidStart ) {
				llvoid();
			} else if( current == typeStart ) {
				lltype();
			} else error();
		}
		llmethodname();
		if( current == voidStart ) {
			llvoid();
		} else if( current == methodparamStart ) {
			llmethodparam();
			while( current == methodparamStart ) {
				llmethodparam();
			}
		} else error();
		while( current == exceptionnameStart ) {
			llexceptionname();
		}
		while( current == modifierStart ) {
			llmodifier();
		}
		pass(methodsynopsisEnd);
	} else error();
}

void docbookParser::llconstructorsynopsis()
{
	if( current == constructorsynopsisStart ) {
		pass(constructorsynopsisStart);
		while( current == modifierStart ) {
			llmodifier();
		}
		if( current == methodnameStart ) {
			llmethodname();
		}
		if( current == voidStart || current == exceptionnameStart || current == constructorsynopsisEnd ) {
			if( current == voidStart ) {
				llvoid();
			}
		} else if( current == methodparamStart ) {
			llmethodparam();
			while( current == methodparamStart ) {
				llmethodparam();
			}
		} else error();
		while( current == exceptionnameStart ) {
			llexceptionname();
		}
		pass(constructorsynopsisEnd);
	} else error();
}

void docbookParser::lldestructorsynopsis()
{
	if( current == destructorsynopsisStart ) {
		pass(destructorsynopsisStart);
		while( current == modifierStart ) {
			llmodifier();
		}
		if( current == methodnameStart ) {
			llmethodname();
		}
		if( current == voidStart || current == exceptionnameStart || current == destructorsynopsisEnd ) {
			if( current == voidStart ) {
				llvoid();
			}
		} else if( current == methodparamStart ) {
			llmethodparam();
			while( current == methodparamStart ) {
				llmethodparam();
			}
		} else error();
		while( current == exceptionnameStart ) {
			llexceptionname();
		}
		pass(destructorsynopsisEnd);
	} else error();
}

void docbookParser::llfieldsynopsis()
{
	if( current == fieldsynopsisStart ) {
		pass(fieldsynopsisStart);
		while( current == modifierStart ) {
			llmodifier();
		}
		if( current == typeStart ) {
			lltype();
		}
		llvarname();
		if( current == initializerStart ) {
			llinitializer();
		}
		pass(fieldsynopsisEnd);
	} else error();
}

void docbookParser::llcmdsynopsis()
{
	if( current == cmdsynopsisStart ) {
		pass(cmdsynopsisStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == commandStart ) {
			llcommand();
		} else if( current == argStart ) {
			llarg();
		} else if( current == groupStart ) {
			llgroup();
		} else if( current == sbrStart ) {
			llsbr();
		} else error();
		while( current == commandStart || current == argStart || current == groupStart || current == sbrStart ) {
			if( current == commandStart ) {
				llcommand();
			} else if( current == argStart ) {
				llarg();
			} else if( current == groupStart ) {
				llgroup();
			} else if( current == sbrStart ) {
				llsbr();
			} else error();
		}
		while( current == synopfragmentStart ) {
			llsynopfragment();
		}
		pass(cmdsynopsisEnd);
	} else error();
}

void docbookParser::llcaution()
{
	if( current == cautionStart ) {
		pass(cautionStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(cautionEnd);
	} else error();
}

void docbookParser::llimportant()
{
	if( current == importantStart ) {
		pass(importantStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(importantEnd);
	} else error();
}

void docbookParser::llnote()
{
	if( current == noteStart ) {
		pass(noteStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(noteEnd);
	} else error();
}

void docbookParser::lltip()
{
	if( current == tipStart ) {
		pass(tipStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(tipEnd);
	} else error();
}

void docbookParser::llwarning()
{
	if( current == warningStart ) {
		pass(warningStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(warningEnd);
	} else error();
}

void docbookParser::llpara()
{
	if( current == paraStart ) {
		pass(paraStart);
		while( current == infoStart || current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == footnoteStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == inlinemediaobjectStart || current == addressStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == revhistoryStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == glosslistStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliolistStart || current == bibliorefStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == corefStart || current == productionsetStart || current == nonterminalStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == functionStart || current == classsynopsisStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == fieldsynopsisStart || current == initializerStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(paraEnd);
	} else error();
}

void docbookParser::llformalpara()
{
	if( current == formalparaStart ) {
		pass(formalparaStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == indextermStart ) {
			llindexterm();
		}
		llpara();
		pass(formalparaEnd);
	} else error();
}

void docbookParser::llsimpara()
{
	if( current == simparaStart ) {
		pass(simparaStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(simparaEnd);
	} else error();
}

void docbookParser::llstep()
{
	if( current == stepStart ) {
		pass(stepStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == stepalternativesStart ) {
				llstepalternatives();
			} else if( current == substepsStart ) {
				llsubsteps();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
		} else if( current == stepalternativesStart || current == substepsStart ) {
			if( current == stepalternativesStart ) {
				llstepalternatives();
			} else if( current == substepsStart ) {
				llsubsteps();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
		} else error();
		pass(stepEnd);
	} else error();
}

void docbookParser::llsubsteps()
{
	if( current == substepsStart ) {
		pass(substepsStart);
		llstep();
		while( current == stepStart ) {
			llstep();
		}
		pass(substepsEnd);
	} else error();
}

void docbookParser::llstepalternatives()
{
	if( current == stepalternativesStart ) {
		pass(stepalternativesStart);
		if( current == infoStart ) {
			llinfo();
		}
		llstep();
		while( current == stepStart ) {
			llstep();
		}
		pass(stepalternativesEnd);
	} else error();
}

void docbookParser::llpersonblurb()
{
	if( current == personblurbStart ) {
		pass(personblurbStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == anchorStart ) {
			llanchor();
		} else error();
		while( current == formalparaStart || current == paraStart || current == simparaStart || current == anchorStart ) {
			if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == anchorStart ) {
				llanchor();
			} else error();
		}
		pass(personblurbEnd);
	} else error();
}

void docbookParser::llattribution()
{
	if( current == attributionStart ) {
		pass(attributionStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == personnameStart || current == personStart || current == replaceableStart || current == citationStart || current == citetitleStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == personStart ) {
				llperson();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(attributionEnd);
	} else error();
}

void docbookParser::lllistitem()
{
	if( current == listitemStart ) {
		pass(listitemStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(listitemEnd);
	} else error();
}

void docbookParser::llsegtitle()
{
	if( current == segtitleStart ) {
		pass(segtitleStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(segtitleEnd);
	} else error();
}

void docbookParser::llseglistitem()
{
	if( current == seglistitemStart ) {
		pass(seglistitemStart);
		llseg();
		while( current == segStart ) {
			llseg();
		}
		pass(seglistitemEnd);
	} else error();
}

void docbookParser::llseg()
{
	if( current == segStart ) {
		pass(segStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(segEnd);
	} else error();
}

void docbookParser::llmember()
{
	if( current == memberStart ) {
		pass(memberStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(memberEnd);
	} else error();
}

void docbookParser::llvarlistentry()
{
	if( current == varlistentryStart ) {
		pass(varlistentryStart);
		llterm();
		while( current == termStart ) {
			llterm();
		}
		lllistitem();
		pass(varlistentryEnd);
	} else error();
}

void docbookParser::llterm()
{
	if( current == termStart ) {
		pass(termStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(termEnd);
	} else error();
}

void docbookParser::llcaption()
{
	if( current == captionStart ) {
		pass(captionStart);
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(captionEnd);
	} else error();
}

void docbookParser::lltextobject()
{
	if( current == textobjectStart ) {
		pass(textobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
		} else if( current == textdataStart ) {
			lltextdata();
		} else if( current == phraseStart ) {
			llphrase();
		} else error();
		pass(textobjectEnd);
	} else error();
}

void docbookParser::lllineannotation()
{
	if( current == lineannotationStart ) {
		pass(lineannotationStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(lineannotationEnd);
	} else error();
}

void docbookParser::llco()
{
	if( current == coStart ) {
		pass(coStart);
		pass(coEnd);
	} else error();
}

void docbookParser::llvideoobject()
{
	if( current == videoobjectStart ) {
		pass(videoobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		llvideodata();
		pass(videoobjectEnd);
	} else error();
}

void docbookParser::llaudioobject()
{
	if( current == audioobjectStart ) {
		pass(audioobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		llaudiodata();
		pass(audioobjectEnd);
	} else error();
}

void docbookParser::llimageobject()
{
	if( current == imageobjectStart ) {
		pass(imageobjectStart);
		if( current == infoStart ) {
			llinfo();
		}
		llimagedata();
		pass(imageobjectEnd);
	} else error();
}

void docbookParser::llimageobjectco()
{
	if( current == imageobjectcoStart ) {
		pass(imageobjectcoStart);
		if( current == infoStart ) {
			llinfo();
		}
		llareaspec();
		llimageobject();
		while( current == imageobjectStart ) {
			llimageobject();
		}
		while( current == calloutlistStart ) {
			llcalloutlist();
		}
		pass(imageobjectcoEnd);
	} else error();
}

void docbookParser::llvideodata()
{
	if( current == videodataStart ) {
		pass(videodataStart);
		if( current == infoStart ) {
			llinfo();
		}
		pass(videodataEnd);
	} else error();
}

void docbookParser::llaudiodata()
{
	if( current == audiodataStart ) {
		pass(audiodataStart);
		if( current == infoStart ) {
			llinfo();
		}
		pass(audiodataEnd);
	} else error();
}

void docbookParser::llimagedata()
{
	if( current == imagedataStart ) {
		pass(imagedataStart);
		if( current == infoStart ) {
			llinfo();
		}
		pass(imagedataEnd);
	} else error();
}

void docbookParser::lltextdata()
{
	if( current == textdataStart ) {
		pass(textdataStart);
		if( current == infoStart ) {
			llinfo();
		}
		pass(textdataEnd);
	} else error();
}

void docbookParser::llpob()
{
	if( current == pobStart ) {
		pass(pobStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(pobEnd);
	} else error();
}

void docbookParser::llstreet()
{
	if( current == streetStart ) {
		pass(streetStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(streetEnd);
	} else error();
}

void docbookParser::llcity()
{
	if( current == cityStart ) {
		pass(cityStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(cityEnd);
	} else error();
}

void docbookParser::llstate()
{
	if( current == stateStart ) {
		pass(stateStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(stateEnd);
	} else error();
}

void docbookParser::llpostcode()
{
	if( current == postcodeStart ) {
		pass(postcodeStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(postcodeEnd);
	} else error();
}

void docbookParser::llcountry()
{
	if( current == countryStart ) {
		pass(countryStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(countryEnd);
	} else error();
}

void docbookParser::llphone()
{
	if( current == phoneStart ) {
		pass(phoneStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(phoneEnd);
	} else error();
}

void docbookParser::llfax()
{
	if( current == faxStart ) {
		pass(faxStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(faxEnd);
	} else error();
}

void docbookParser::llotheraddr()
{
	if( current == otheraddrStart ) {
		pass(otheraddrStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(otheraddrEnd);
	} else error();
}

void docbookParser::llaffiliation()
{
	if( current == affiliationStart ) {
		pass(affiliationStart);
		if( current == shortaffilStart ) {
			llshortaffil();
		}
		while( current == jobtitleStart ) {
			lljobtitle();
		}
		if( current == orgStart ) {
			llorg();
		}
		if( current == orgnameStart ) {
			llorgname();
		}
		while( current == orgdivStart ) {
			llorgdiv();
		}
		while( current == addressStart ) {
			lladdress();
		}
		pass(affiliationEnd);
	} else error();
}

void docbookParser::llshortaffil()
{
	if( current == shortaffilStart ) {
		pass(shortaffilStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(shortaffilEnd);
	} else error();
}

void docbookParser::llorgdiv()
{
	if( current == orgdivStart ) {
		pass(orgdivStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(orgdivEnd);
	} else error();
}

void docbookParser::llhonorific()
{
	if( current == honorificStart ) {
		pass(honorificStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(honorificEnd);
	} else error();
}

void docbookParser::llfirstname()
{
	if( current == firstnameStart ) {
		pass(firstnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(firstnameEnd);
	} else error();
}

void docbookParser::llsurname()
{
	if( current == surnameStart ) {
		pass(surnameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(surnameEnd);
	} else error();
}

void docbookParser::lllineage()
{
	if( current == lineageStart ) {
		pass(lineageStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(lineageEnd);
	} else error();
}

void docbookParser::llothername()
{
	if( current == othernameStart ) {
		pass(othernameStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(othernameEnd);
	} else error();
}

void docbookParser::llcontrib()
{
	if( current == contribStart ) {
		pass(contribStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(contribEnd);
	} else error();
}

void docbookParser::llconfdates()
{
	if( current == confdatesStart ) {
		pass(confdatesStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(confdatesEnd);
	} else error();
}

void docbookParser::llconftitle()
{
	if( current == conftitleStart ) {
		pass(conftitleStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(conftitleEnd);
	} else error();
}

void docbookParser::llconfnum()
{
	if( current == confnumStart ) {
		pass(confnumStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(confnumEnd);
	} else error();
}

void docbookParser::llconfsponsor()
{
	if( current == confsponsorStart ) {
		pass(confsponsorStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(confsponsorEnd);
	} else error();
}

void docbookParser::llyear()
{
	if( current == yearStart ) {
		pass(yearStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(yearEnd);
	} else error();
}

void docbookParser::llholder()
{
	if( current == holderStart ) {
		pass(holderStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(holderEnd);
	} else error();
}

void docbookParser::llrevision()
{
	if( current == revisionStart ) {
		pass(revisionStart);
		if( current == revnumberStart ) {
			llrevnumber();
		}
		lldate();
		while( current == authorStart || current == authorinitialsStart ) {
			if( current == authorStart ) {
				llauthor();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else error();
		}
		if( current == revremarkStart || current == revdescriptionStart ) {
			if( current == revremarkStart ) {
				llrevremark();
			} else if( current == revdescriptionStart ) {
				llrevdescription();
			} else error();
		}
		pass(revisionEnd);
	} else error();
}

void docbookParser::llrevnumber()
{
	if( current == revnumberStart ) {
		pass(revnumberStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(revnumberEnd);
	} else error();
}

void docbookParser::llrevremark()
{
	if( current == revremarkStart ) {
		pass(revremarkStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(revremarkEnd);
	} else error();
}

void docbookParser::llrevdescription()
{
	if( current == revdescriptionStart ) {
		pass(revdescriptionStart);
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(revdescriptionEnd);
	} else error();
}

void docbookParser::llrefentrytitle()
{
	if( current == refentrytitleStart ) {
		pass(refentrytitleStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(refentrytitleEnd);
	} else error();
}

void docbookParser::llmanvolnum()
{
	if( current == manvolnumStart ) {
		pass(manvolnumStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(manvolnumEnd);
	} else error();
}

void docbookParser::llset()
{
	if( current == setStart ) {
		pass(setStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == tocStart ) {
			lltoc();
		}
		if( current == setStart ) {
			llset();
		} else if( current == bookStart ) {
			llbook();
		} else error();
		while( current == setStart || current == bookStart ) {
			if( current == setStart ) {
				llset();
			} else if( current == bookStart ) {
				llbook();
			} else error();
		}
		if( current == setindexStart ) {
			llsetindex();
		}
		pass(setEnd);
	} else error();
}

void docbookParser::lltoc()
{
	if( current == tocStart ) {
		pass(tocStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		while( current == tocdivStart || current == tocentryStart ) {
			if( current == tocdivStart ) {
				lltocdiv();
			} else if( current == tocentryStart ) {
				lltocentry();
			} else error();
		}
		pass(tocEnd);
	} else error();
}

void docbookParser::llbook()
{
	if( current == bookStart ) {
		pass(bookStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == dedicationStart || current == acknowledgementsStart || current == colophonStart || current == appendixStart || current == chapterStart || current == partStart || current == prefaceStart || current == articleStart || current == referenceStart || current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == dedicationStart ) {
				lldedication();
			} else if( current == acknowledgementsStart ) {
				llacknowledgements();
			} else if( current == colophonStart ) {
				llcolophon();
			} else if( current == appendixStart ) {
				llappendix();
			} else if( current == chapterStart ) {
				llchapter();
			} else if( current == partStart ) {
				llpart();
			} else if( current == prefaceStart ) {
				llpreface();
			} else if( current == articleStart ) {
				llarticle();
			} else if( current == referenceStart ) {
				llreference();
			} else if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(bookEnd);
	} else error();
}

void docbookParser::llsetindex()
{
	if( current == setindexStart ) {
		pass(setindexStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		while( current == indexdivStart ) {
			llindexdiv();
		}
		while( current == indexentryStart ) {
			llindexentry();
		}
		pass(setindexEnd);
	} else error();
}

void docbookParser::llglossary()
{
	if( current == glossaryStart ) {
		pass(glossaryStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		while( current == glossdivStart ) {
			llglossdiv();
		}
		while( current == glossentryStart ) {
			llglossentry();
		}
		if( current == bibliographyStart ) {
			llbibliography();
		}
		pass(glossaryEnd);
	} else error();
}

void docbookParser::llbibliography()
{
	if( current == bibliographyStart ) {
		pass(bibliographyStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == biblioentryStart || current == bibliomixedStart ) {
			if( current == biblioentryStart ) {
				llbiblioentry();
			} else if( current == bibliomixedStart ) {
				llbibliomixed();
			} else error();
			while( current == biblioentryStart || current == bibliomixedStart ) {
				if( current == biblioentryStart ) {
					llbiblioentry();
				} else if( current == bibliomixedStart ) {
					llbibliomixed();
				} else error();
			}
		} else if( current == bibliodivStart ) {
			llbibliodiv();
			while( current == bibliodivStart ) {
				llbibliodiv();
			}
		} else error();
		pass(bibliographyEnd);
	} else error();
}

void docbookParser::llindex()
{
	if( current == indexStart ) {
		pass(indexStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		while( current == indexdivStart ) {
			llindexdiv();
		}
		while( current == indexentryStart ) {
			llindexentry();
		}
		llsegmentedlist();
		pass(indexEnd);
	} else error();
}

void docbookParser::lldedication()
{
	if( current == dedicationStart ) {
		pass(dedicationStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(dedicationEnd);
	} else error();
}

void docbookParser::llacknowledgements()
{
	if( current == acknowledgementsStart ) {
		pass(acknowledgementsStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(acknowledgementsEnd);
	} else error();
}

void docbookParser::llpreface()
{
	if( current == prefaceStart ) {
		pass(prefaceStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == sect1Start || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect1Start ) {
					llsect1();
					while( current == sect1Start ) {
						llsect1();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect1Start ) {
			llsect1();
			while( current == sect1Start ) {
				llsect1();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(prefaceEnd);
	} else error();
}

void docbookParser::llchapter()
{
	if( current == chapterStart ) {
		pass(chapterStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == sect1Start || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect1Start ) {
					llsect1();
					while( current == sect1Start ) {
						llsect1();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect1Start ) {
			llsect1();
			while( current == sect1Start ) {
				llsect1();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(chapterEnd);
	} else error();
}

void docbookParser::llappendix()
{
	if( current == appendixStart ) {
		pass(appendixStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == sect1Start || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect1Start ) {
					llsect1();
					while( current == sect1Start ) {
						llsect1();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect1Start ) {
			llsect1();
			while( current == sect1Start ) {
				llsect1();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(appendixEnd);
	} else error();
}

void docbookParser::llarticle()
{
	if( current == articleStart ) {
		pass(articleStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == acknowledgementsStart || current == colophonStart || current == appendixStart || current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == acknowledgementsStart ) {
				llacknowledgements();
			} else if( current == colophonStart ) {
				llcolophon();
			} else if( current == appendixStart ) {
				llappendix();
			} else if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == sect1Start || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect1Start ) {
					llsect1();
					while( current == sect1Start ) {
						llsect1();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect1Start ) {
			llsect1();
			while( current == sect1Start ) {
				llsect1();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		while( current == acknowledgementsStart || current == colophonStart || current == appendixStart || current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == acknowledgementsStart ) {
				llacknowledgements();
			} else if( current == colophonStart ) {
				llcolophon();
			} else if( current == appendixStart ) {
				llappendix();
			} else if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(articleEnd);
	} else error();
}

void docbookParser::llcolophon()
{
	if( current == colophonStart ) {
		pass(colophonStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(colophonEnd);
	} else error();
}

void docbookParser::llpart()
{
	if( current == partStart ) {
		pass(partStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == partintroStart ) {
			llpartintro();
		}
		if( current == dedicationStart ) {
			lldedication();
		} else if( current == acknowledgementsStart ) {
			llacknowledgements();
		} else if( current == colophonStart ) {
			llcolophon();
		} else if( current == appendixStart ) {
			llappendix();
		} else if( current == chapterStart ) {
			llchapter();
		} else if( current == prefaceStart ) {
			llpreface();
		} else if( current == articleStart ) {
			llarticle();
		} else if( current == referenceStart ) {
			llreference();
		} else if( current == refentryStart ) {
			llrefentry();
		} else if( current == glossaryStart ) {
			llglossary();
		} else if( current == bibliographyStart ) {
			llbibliography();
		} else if( current == indexStart ) {
			llindex();
		} else if( current == tocStart ) {
			lltoc();
		} else error();
		while( current == dedicationStart || current == acknowledgementsStart || current == colophonStart || current == appendixStart || current == chapterStart || current == prefaceStart || current == articleStart || current == referenceStart || current == refentryStart || current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == dedicationStart ) {
				lldedication();
			} else if( current == acknowledgementsStart ) {
				llacknowledgements();
			} else if( current == colophonStart ) {
				llcolophon();
			} else if( current == appendixStart ) {
				llappendix();
			} else if( current == chapterStart ) {
				llchapter();
			} else if( current == prefaceStart ) {
				llpreface();
			} else if( current == articleStart ) {
				llarticle();
			} else if( current == referenceStart ) {
				llreference();
			} else if( current == refentryStart ) {
				llrefentry();
			} else if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(partEnd);
	} else error();
}

void docbookParser::llreference()
{
	if( current == referenceStart ) {
		pass(referenceStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == partintroStart ) {
			llpartintro();
		}
		llrefentry();
		while( current == refentryStart ) {
			llrefentry();
		}
		pass(referenceEnd);
	} else error();
}

void docbookParser::llsection()
{
	if( current == sectionStart ) {
		pass(sectionStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sectionEnd);
	} else error();
}

void docbookParser::llsimplesect()
{
	if( current == simplesectStart ) {
		pass(simplesectStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(simplesectEnd);
	} else error();
}

void docbookParser::llsect1()
{
	if( current == sect1Start ) {
		pass(sect1Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == simplesectStart || current == sect2Start ) {
				if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect2Start ) {
					llsect2();
					while( current == sect2Start ) {
						llsect2();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else error();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect2Start ) {
			llsect2();
			while( current == sect2Start ) {
				llsect2();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sect1End);
	} else error();
}

void docbookParser::llrefentry()
{
	if( current == refentryStart ) {
		pass(refentryStart);
		while( current == indextermStart ) {
			llindexterm();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == refmetaStart ) {
			llrefmeta();
		}
		llrefnamediv();
		while( current == refnamedivStart ) {
			llrefnamediv();
		}
		if( current == refsynopsisdivStart ) {
			llrefsynopsisdiv();
		}
		if( current == refsectionStart ) {
			llrefsection();
			while( current == refsectionStart ) {
				llrefsection();
			}
		} else if( current == refsect1Start ) {
			llrefsect1();
			while( current == refsect1Start ) {
				llrefsect1();
			}
		} else error();
		pass(refentryEnd);
	} else error();
}

void docbookParser::llpartintro()
{
	if( current == partintroStart ) {
		pass(partintroStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == sectionStart || current == simplesectStart || current == sect1Start || current == refentryStart ) {
				if( current == sectionStart ) {
					llsection();
					while( current == sectionStart ) {
						llsection();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect1Start ) {
					llsect1();
					while( current == sect1Start ) {
						llsect1();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == refentryStart ) {
					llrefentry();
					while( current == refentryStart ) {
						llrefentry();
					}
				} else error();
			}
		} else if( current == sectionStart ) {
			llsection();
			while( current == sectionStart ) {
				llsection();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect1Start ) {
			llsect1();
			while( current == sect1Start ) {
				llsect1();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == refentryStart ) {
			llrefentry();
			while( current == refentryStart ) {
				llrefentry();
			}
		} else error();
		pass(partintroEnd);
	} else error();
}

void docbookParser::lllocator()
{
	if( current == locatorStart ) {
		pass(locatorStart);
		pass(locatorEnd);
	} else error();
}

void docbookParser::llarc()
{
	if( current == arcStart ) {
		pass(arcStart);
		pass(arcEnd);
	} else error();
}

void docbookParser::llsect2()
{
	if( current == sect2Start ) {
		pass(sect2Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == simplesectStart || current == sect3Start ) {
				if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect3Start ) {
					llsect3();
					while( current == sect3Start ) {
						llsect3();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else error();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect3Start ) {
			llsect3();
			while( current == sect3Start ) {
				llsect3();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sect2End);
	} else error();
}

void docbookParser::llsect3()
{
	if( current == sect3Start ) {
		pass(sect3Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == simplesectStart || current == sect4Start ) {
				if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect4Start ) {
					llsect4();
					while( current == sect4Start ) {
						llsect4();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else error();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect4Start ) {
			llsect4();
			while( current == sect4Start ) {
				llsect4();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sect3End);
	} else error();
}

void docbookParser::llsect4()
{
	if( current == sect4Start ) {
		pass(sect4Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == simplesectStart || current == sect5Start ) {
				if( current == simplesectStart ) {
					llsimplesect();
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else if( current == sect5Start ) {
					llsect5();
					while( current == sect5Start ) {
						llsect5();
					}
					while( current == simplesectStart ) {
						llsimplesect();
					}
				} else error();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == sect5Start ) {
			llsect5();
			while( current == sect5Start ) {
				llsect5();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sect4End);
	} else error();
}

void docbookParser::llsect5()
{
	if( current == sect5Start ) {
		pass(sect5Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else if( current == simplesectStart ) {
			llsimplesect();
			while( current == simplesectStart ) {
				llsimplesect();
			}
		} else error();
		while( current == glossaryStart || current == bibliographyStart || current == indexStart || current == tocStart ) {
			if( current == glossaryStart ) {
				llglossary();
			} else if( current == bibliographyStart ) {
				llbibliography();
			} else if( current == indexStart ) {
				llindex();
			} else if( current == tocStart ) {
				lltoc();
			} else error();
		}
		pass(sect5End);
	} else error();
}

void docbookParser::llrefmeta()
{
	if( current == refmetaStart ) {
		pass(refmetaStart);
		while( current == indextermStart ) {
			llindexterm();
		}
		llrefentrytitle();
		if( current == manvolnumStart ) {
			llmanvolnum();
		}
		while( current == refmiscinfoStart ) {
			llrefmiscinfo();
		}
		while( current == indextermStart ) {
			llindexterm();
		}
		pass(refmetaEnd);
	} else error();
}

void docbookParser::llrefnamediv()
{
	if( current == refnamedivStart ) {
		pass(refnamedivStart);
		if( current == refdescriptorStart ) {
			llrefdescriptor();
		}
		llrefname();
		while( current == refnameStart ) {
			llrefname();
		}
		llrefpurpose();
		while( current == refclassStart ) {
			llrefclass();
		}
		pass(refnamedivEnd);
	} else error();
}

void docbookParser::llrefsynopsisdiv()
{
	if( current == refsynopsisdivStart ) {
		pass(refsynopsisdivStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			if( current == refsectionStart || current == refsect2Start ) {
				if( current == refsectionStart ) {
					llrefsection();
					while( current == refsectionStart ) {
						llrefsection();
					}
				} else if( current == refsect2Start ) {
					llrefsect2();
					while( current == refsect2Start ) {
						llrefsect2();
					}
				} else error();
			}
		} else if( current == refsectionStart ) {
			llrefsection();
			while( current == refsectionStart ) {
				llrefsection();
			}
		} else if( current == refsect2Start ) {
			llrefsect2();
			while( current == refsect2Start ) {
				llrefsect2();
			}
		} else error();
		pass(refsynopsisdivEnd);
	} else error();
}

void docbookParser::llrefsection()
{
	if( current == refsectionStart ) {
		pass(refsectionStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			while( current == refsectionStart ) {
				llrefsection();
			}
		} else if( current == refsectionStart ) {
			llrefsection();
			while( current == refsectionStart ) {
				llrefsection();
			}
		} else error();
		pass(refsectionEnd);
	} else error();
}

void docbookParser::llrefsect1()
{
	if( current == refsect1Start ) {
		pass(refsect1Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			while( current == refsect2Start ) {
				llrefsect2();
			}
		} else if( current == refsect2Start ) {
			llrefsect2();
			while( current == refsect2Start ) {
				llrefsect2();
			}
		} else error();
		pass(refsect1End);
	} else error();
}

void docbookParser::llrefmiscinfo()
{
	if( current == refmiscinfoStart ) {
		pass(refmiscinfoStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(refmiscinfoEnd);
	} else error();
}

void docbookParser::llrefdescriptor()
{
	if( current == refdescriptorStart ) {
		pass(refdescriptorStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(refdescriptorEnd);
	} else error();
}

void docbookParser::llrefname()
{
	if( current == refnameStart ) {
		pass(refnameStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(refnameEnd);
	} else error();
}

void docbookParser::llrefpurpose()
{
	if( current == refpurposeStart ) {
		pass(refpurposeStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(refpurposeEnd);
	} else error();
}

void docbookParser::llrefclass()
{
	if( current == refclassStart ) {
		pass(refclassStart);
		while( current == applicationStart ) {
			llapplication();
		}
		pass(refclassEnd);
	} else error();
}

void docbookParser::llrefsect2()
{
	if( current == refsect2Start ) {
		pass(refsect2Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
			while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
				if( current == procedureStart ) {
					llprocedure();
				} else if( current == sidebarStart ) {
					llsidebar();
				} else if( current == blockquoteStart ) {
					llblockquote();
				} else if( current == bridgeheadStart ) {
					llbridgehead();
				} else if( current == remarkStart ) {
					llremark();
				} else if( current == epigraphStart ) {
					llepigraph();
				} else if( current == formalparaStart ) {
					llformalpara();
				} else if( current == paraStart ) {
					llpara();
				} else if( current == simparaStart ) {
					llsimpara();
				} else if( current == itemizedlistStart ) {
					llitemizedlist();
				} else if( current == orderedlistStart ) {
					llorderedlist();
				} else if( current == segmentedlistStart ) {
					llsegmentedlist();
				} else if( current == simplelistStart ) {
					llsimplelist();
				} else if( current == variablelistStart ) {
					llvariablelist();
				} else if( current == exampleStart ) {
					llexample();
				} else if( current == informalexampleStart ) {
					llinformalexample();
				} else if( current == literallayoutStart ) {
					llliterallayout();
				} else if( current == screenStart ) {
					llscreen();
				} else if( current == screenshotStart ) {
					llscreenshot();
				} else if( current == figureStart ) {
					llfigure();
				} else if( current == informalfigureStart ) {
					llinformalfigure();
				} else if( current == mediaobjectStart ) {
					llmediaobject();
				} else if( current == addressStart ) {
					lladdress();
				} else if( current == revhistoryStart ) {
					llrevhistory();
				} else if( current == anchorStart ) {
					llanchor();
				} else if( current == annotationStart ) {
					llannotation();
				} else if( current == glosslistStart ) {
					llglosslist();
				} else if( current == bibliolistStart ) {
					llbibliolist();
				} else if( current == indextermStart ) {
					llindexterm();
				} else if( current == taskStart ) {
					lltask();
				} else if( current == calloutlistStart ) {
					llcalloutlist();
				} else if( current == programlistingcoStart ) {
					llprogramlistingco();
				} else if( current == screencoStart ) {
					llscreenco();
				} else if( current == productionsetStart ) {
					llproductionset();
				} else if( current == constraintdefStart ) {
					llconstraintdef();
				} else if( current == tableStart ) {
					lltable();
				} else if( current == informaltableStart ) {
					llinformaltable();
				} else if( current == msgsetStart ) {
					llmsgset();
				} else if( current == qandasetStart ) {
					llqandaset();
				} else if( current == equationStart ) {
					llequation();
				} else if( current == informalequationStart ) {
					llinformalequation();
				} else if( current == cmdsynopsisStart ) {
					llcmdsynopsis();
				} else if( current == synopsisStart ) {
					llsynopsis();
				} else if( current == funcsynopsisStart ) {
					llfuncsynopsis();
				} else if( current == classsynopsisStart ) {
					llclasssynopsis();
				} else if( current == fieldsynopsisStart ) {
					llfieldsynopsis();
				} else if( current == constructorsynopsisStart ) {
					llconstructorsynopsis();
				} else if( current == destructorsynopsisStart ) {
					lldestructorsynopsis();
				} else if( current == methodsynopsisStart ) {
					llmethodsynopsis();
				} else if( current == programlistingStart ) {
					llprogramlisting();
				} else if( current == cautionStart ) {
					llcaution();
				} else if( current == importantStart ) {
					llimportant();
				} else if( current == noteStart ) {
					llnote();
				} else if( current == tipStart ) {
					lltip();
				} else if( current == warningStart ) {
					llwarning();
				} else error();
			}
			while( current == refsect3Start ) {
				llrefsect3();
			}
		} else if( current == refsect3Start ) {
			llrefsect3();
			while( current == refsect3Start ) {
				llrefsect3();
			}
		} else error();
		pass(refsect2End);
	} else error();
}

void docbookParser::llrefsect3()
{
	if( current == refsect3Start ) {
		pass(refsect3Start);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(refsect3End);
	} else error();
}

void docbookParser::llglossentry()
{
	if( current == glossentryStart ) {
		pass(glossentryStart);
		llglossterm();
		if( current == acronymStart ) {
			llacronym();
		}
		if( current == abbrevStart ) {
			llabbrev();
		}
		while( current == indextermStart ) {
			llindexterm();
		}
		if( current == glossdefStart ) {
			llglossdef();
			while( current == glossdefStart ) {
				llglossdef();
			}
		} else if( current == glossseeStart ) {
			llglosssee();
		} else error();
		pass(glossentryEnd);
	} else error();
}

void docbookParser::llglosssee()
{
	if( current == glossseeStart ) {
		pass(glossseeStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(glossseeEnd);
	} else error();
}

void docbookParser::llglossdef()
{
	if( current == glossdefStart ) {
		pass(glossdefStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		while( current == glossseealsoStart ) {
			llglossseealso();
		}
		pass(glossdefEnd);
	} else error();
}

void docbookParser::llglossseealso()
{
	if( current == glossseealsoStart ) {
		pass(glossseealsoStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(glossseealsoEnd);
	} else error();
}

void docbookParser::llglossdiv()
{
	if( current == glossdivStart ) {
		pass(glossdivStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		llglossentry();
		while( current == glossentryStart ) {
			llglossentry();
		}
		pass(glossdivEnd);
	} else error();
}

void docbookParser::llbiblioentry()
{
	if( current == biblioentryStart ) {
		pass(biblioentryStart);
		if( current == titleStart ) {
			lltitle();
		} else if( current == titleabbrevStart ) {
			lltitleabbrev();
		} else if( current == subtitleStart ) {
			llsubtitle();
		} else if( current == subjectsetStart ) {
			llsubjectset();
		} else if( current == keywordsetStart ) {
			llkeywordset();
		} else if( current == abstractStart ) {
			llabstract();
		} else if( current == personblurbStart ) {
			llpersonblurb();
		} else if( current == footnoteStart ) {
			llfootnote();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == orgnameStart ) {
			llorgname();
		} else if( current == artpagenumsStart ) {
			llartpagenums();
		} else if( current == personnameStart ) {
			llpersonname();
		} else if( current == authorStart ) {
			llauthor();
		} else if( current == authorgroupStart ) {
			llauthorgroup();
		} else if( current == collabStart ) {
			llcollab();
		} else if( current == authorinitialsStart ) {
			llauthorinitials();
		} else if( current == personStart ) {
			llperson();
		} else if( current == orgStart ) {
			llorg();
		} else if( current == confgroupStart ) {
			llconfgroup();
		} else if( current == contractnumStart ) {
			llcontractnum();
		} else if( current == contractsponsorStart ) {
			llcontractsponsor();
		} else if( current == copyrightStart ) {
			llcopyright();
		} else if( current == coverStart ) {
			llcover();
		} else if( current == dateStart ) {
			lldate();
		} else if( current == editionStart ) {
			lledition();
		} else if( current == editorStart ) {
			lleditor();
		} else if( current == biblioidStart ) {
			llbiblioid();
		} else if( current == citebiblioidStart ) {
			llcitebiblioid();
		} else if( current == bibliosourceStart ) {
			llbibliosource();
		} else if( current == bibliorelationStart ) {
			llbibliorelation();
		} else if( current == bibliocoverageStart ) {
			llbibliocoverage();
		} else if( current == legalnoticeStart ) {
			lllegalnotice();
		} else if( current == othercreditStart ) {
			llothercredit();
		} else if( current == pagenumsStart ) {
			llpagenums();
		} else if( current == printhistoryStart ) {
			llprinthistory();
		} else if( current == pubdateStart ) {
			llpubdate();
		} else if( current == publisherStart ) {
			llpublisher();
		} else if( current == publishernameStart ) {
			llpublishername();
		} else if( current == releaseinfoStart ) {
			llreleaseinfo();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == seriesvolnumsStart ) {
			llseriesvolnums();
		} else if( current == volumenumStart ) {
			llvolumenum();
		} else if( current == issuenumStart ) {
			llissuenum();
		} else if( current == abbrevStart ) {
			llabbrev();
		} else if( current == acronymStart ) {
			llacronym();
		} else if( current == citerefentryStart ) {
			llciterefentry();
		} else if( current == citetitleStart ) {
			llcitetitle();
		} else if( current == emphasisStart ) {
			llemphasis();
		} else if( current == foreignphraseStart ) {
			llforeignphrase();
		} else if( current == phraseStart ) {
			llphrase();
		} else if( current == quoteStart ) {
			llquote();
		} else if( current == subscriptStart ) {
			llsubscript();
		} else if( current == superscriptStart ) {
			llsuperscript();
		} else if( current == wordaswordStart ) {
			llwordasword();
		} else if( current == footnoterefStart ) {
			llfootnoteref();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == extendedlinkStart ) {
			llextendedlink();
		} else if( current == firsttermStart ) {
			llfirstterm();
		} else if( current == glosstermStart ) {
			llglossterm();
		} else if( current == bibliosetStart ) {
			llbiblioset();
		} else if( current == bibliomsetStart ) {
			llbibliomset();
		} else if( current == bibliomiscStart ) {
			llbibliomisc();
		} else if( current == itermsetStart ) {
			llitermset();
		} else if( current == corefStart ) {
			llcoref();
		} else if( current == productnameStart ) {
			llproductname();
		} else if( current == productnumberStart ) {
			llproductnumber();
		} else error();
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart || current == subjectsetStart || current == keywordsetStart || current == abstractStart || current == personblurbStart || current == footnoteStart || current == mediaobjectStart || current == addressStart || current == orgnameStart || current == artpagenumsStart || current == personnameStart || current == authorStart || current == authorgroupStart || current == collabStart || current == authorinitialsStart || current == personStart || current == orgStart || current == confgroupStart || current == contractnumStart || current == contractsponsorStart || current == copyrightStart || current == coverStart || current == dateStart || current == editionStart || current == editorStart || current == biblioidStart || current == citebiblioidStart || current == bibliosourceStart || current == bibliorelationStart || current == bibliocoverageStart || current == legalnoticeStart || current == othercreditStart || current == pagenumsStart || current == printhistoryStart || current == pubdateStart || current == publisherStart || current == publishernameStart || current == releaseinfoStart || current == revhistoryStart || current == seriesvolnumsStart || current == volumenumStart || current == issuenumStart || current == abbrevStart || current == acronymStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == wordaswordStart || current == footnoterefStart || current == annotationStart || current == extendedlinkStart || current == firsttermStart || current == glosstermStart || current == bibliosetStart || current == bibliomsetStart || current == bibliomiscStart || current == itermsetStart || current == corefStart || current == productnameStart || current == productnumberStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else if( current == subjectsetStart ) {
				llsubjectset();
			} else if( current == keywordsetStart ) {
				llkeywordset();
			} else if( current == abstractStart ) {
				llabstract();
			} else if( current == personblurbStart ) {
				llpersonblurb();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == artpagenumsStart ) {
				llartpagenums();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == authorgroupStart ) {
				llauthorgroup();
			} else if( current == collabStart ) {
				llcollab();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == confgroupStart ) {
				llconfgroup();
			} else if( current == contractnumStart ) {
				llcontractnum();
			} else if( current == contractsponsorStart ) {
				llcontractsponsor();
			} else if( current == copyrightStart ) {
				llcopyright();
			} else if( current == coverStart ) {
				llcover();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editionStart ) {
				lledition();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == biblioidStart ) {
				llbiblioid();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == bibliosourceStart ) {
				llbibliosource();
			} else if( current == bibliorelationStart ) {
				llbibliorelation();
			} else if( current == bibliocoverageStart ) {
				llbibliocoverage();
			} else if( current == legalnoticeStart ) {
				lllegalnotice();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else if( current == pagenumsStart ) {
				llpagenums();
			} else if( current == printhistoryStart ) {
				llprinthistory();
			} else if( current == pubdateStart ) {
				llpubdate();
			} else if( current == publisherStart ) {
				llpublisher();
			} else if( current == publishernameStart ) {
				llpublishername();
			} else if( current == releaseinfoStart ) {
				llreleaseinfo();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == seriesvolnumsStart ) {
				llseriesvolnums();
			} else if( current == volumenumStart ) {
				llvolumenum();
			} else if( current == issuenumStart ) {
				llissuenum();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == extendedlinkStart ) {
				llextendedlink();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == bibliosetStart ) {
				llbiblioset();
			} else if( current == bibliomsetStart ) {
				llbibliomset();
			} else if( current == bibliomiscStart ) {
				llbibliomisc();
			} else if( current == itermsetStart ) {
				llitermset();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else error();
		}
		pass(biblioentryEnd);
	} else error();
}

void docbookParser::llbibliomixed()
{
	if( current == bibliomixedStart ) {
		pass(bibliomixedStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart || current == subjectsetStart || current == keywordsetStart || current == abstractStart || current == personblurbStart || current == footnoteStart || current == mediaobjectStart || current == addressStart || current == orgnameStart || current == artpagenumsStart || current == personnameStart || current == authorStart || current == authorgroupStart || current == collabStart || current == authorinitialsStart || current == personStart || current == orgStart || current == confgroupStart || current == contractnumStart || current == contractsponsorStart || current == copyrightStart || current == coverStart || current == dateStart || current == editionStart || current == editorStart || current == biblioidStart || current == citebiblioidStart || current == bibliosourceStart || current == bibliorelationStart || current == bibliocoverageStart || current == legalnoticeStart || current == othercreditStart || current == pagenumsStart || current == printhistoryStart || current == pubdateStart || current == publisherStart || current == publishernameStart || current == releaseinfoStart || current == revhistoryStart || current == seriesvolnumsStart || current == volumenumStart || current == issuenumStart || current == abbrevStart || current == acronymStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == wordaswordStart || current == footnoterefStart || current == annotationStart || current == extendedlinkStart || current == firsttermStart || current == glosstermStart || current == bibliosetStart || current == bibliomsetStart || current == bibliomiscStart || current == itermsetStart || current == corefStart || current == productnameStart || current == productnumberStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else if( current == subjectsetStart ) {
				llsubjectset();
			} else if( current == keywordsetStart ) {
				llkeywordset();
			} else if( current == abstractStart ) {
				llabstract();
			} else if( current == personblurbStart ) {
				llpersonblurb();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == artpagenumsStart ) {
				llartpagenums();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == authorgroupStart ) {
				llauthorgroup();
			} else if( current == collabStart ) {
				llcollab();
			} else if( current == authorinitialsStart ) {
				llauthorinitials();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == confgroupStart ) {
				llconfgroup();
			} else if( current == contractnumStart ) {
				llcontractnum();
			} else if( current == contractsponsorStart ) {
				llcontractsponsor();
			} else if( current == copyrightStart ) {
				llcopyright();
			} else if( current == coverStart ) {
				llcover();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editionStart ) {
				lledition();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == biblioidStart ) {
				llbiblioid();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == bibliosourceStart ) {
				llbibliosource();
			} else if( current == bibliorelationStart ) {
				llbibliorelation();
			} else if( current == bibliocoverageStart ) {
				llbibliocoverage();
			} else if( current == legalnoticeStart ) {
				lllegalnotice();
			} else if( current == othercreditStart ) {
				llothercredit();
			} else if( current == pagenumsStart ) {
				llpagenums();
			} else if( current == printhistoryStart ) {
				llprinthistory();
			} else if( current == pubdateStart ) {
				llpubdate();
			} else if( current == publisherStart ) {
				llpublisher();
			} else if( current == publishernameStart ) {
				llpublishername();
			} else if( current == releaseinfoStart ) {
				llreleaseinfo();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == seriesvolnumsStart ) {
				llseriesvolnums();
			} else if( current == volumenumStart ) {
				llvolumenum();
			} else if( current == issuenumStart ) {
				llissuenum();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == extendedlinkStart ) {
				llextendedlink();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == bibliosetStart ) {
				llbiblioset();
			} else if( current == bibliomsetStart ) {
				llbibliomset();
			} else if( current == bibliomiscStart ) {
				llbibliomisc();
			} else if( current == itermsetStart ) {
				llitermset();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else error();
		}
		pass(bibliomixedEnd);
	} else error();
}

void docbookParser::llbibliodiv()
{
	if( current == bibliodivStart ) {
		pass(bibliodivStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == biblioentryStart ) {
			llbiblioentry();
		} else if( current == bibliomixedStart ) {
			llbibliomixed();
		} else error();
		while( current == biblioentryStart || current == bibliomixedStart ) {
			if( current == biblioentryStart ) {
				llbiblioentry();
			} else if( current == bibliomixedStart ) {
				llbibliomixed();
			} else error();
		}
		pass(bibliodivEnd);
	} else error();
}

void docbookParser::llprimary()
{
	if( current == primaryStart ) {
		pass(primaryStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(primaryEnd);
	} else error();
}

void docbookParser::llsecondary()
{
	if( current == secondaryStart ) {
		pass(secondaryStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(secondaryEnd);
	} else error();
}

void docbookParser::lltertiary()
{
	if( current == tertiaryStart ) {
		pass(tertiaryStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(tertiaryEnd);
	} else error();
}

void docbookParser::llsee()
{
	if( current == seeStart ) {
		pass(seeStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(seeEnd);
	} else error();
}

void docbookParser::llseealso()
{
	if( current == seealsoStart ) {
		pass(seealsoStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(seealsoEnd);
	} else error();
}

void docbookParser::llindexdiv()
{
	if( current == indexdivStart ) {
		pass(indexdivStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == indexentryStart ) {
			llindexentry();
			while( current == indexentryStart ) {
				llindexentry();
			}
		} else error();
		pass(indexdivEnd);
	} else error();
}

void docbookParser::llindexentry()
{
	if( current == indexentryStart ) {
		pass(indexentryStart);
		llprimaryie();
		while( current == seeieStart || current == seealsoieStart ) {
			if( current == seeieStart ) {
				llseeie();
			} else if( current == seealsoieStart ) {
				llseealsoie();
			} else error();
		}
		llsecondaryie();
		while( current == tertiaryieStart || current == seeieStart || current == seealsoieStart ) {
			if( current == tertiaryieStart ) {
				lltertiaryie();
			} else if( current == seeieStart ) {
				llseeie();
			} else if( current == seealsoieStart ) {
				llseealsoie();
			} else error();
		}
		pass(indexentryEnd);
	} else error();
}

void docbookParser::llprimaryie()
{
	if( current == primaryieStart ) {
		pass(primaryieStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(primaryieEnd);
	} else error();
}

void docbookParser::llseeie()
{
	if( current == seeieStart ) {
		pass(seeieStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(seeieEnd);
	} else error();
}

void docbookParser::llseealsoie()
{
	if( current == seealsoieStart ) {
		pass(seealsoieStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(seealsoieEnd);
	} else error();
}

void docbookParser::llsecondaryie()
{
	if( current == secondaryieStart ) {
		pass(secondaryieStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(secondaryieEnd);
	} else error();
}

void docbookParser::lltertiaryie()
{
	if( current == tertiaryieStart ) {
		pass(tertiaryieStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(tertiaryieEnd);
	} else error();
}

void docbookParser::lltocdiv()
{
	if( current == tocdivStart ) {
		pass(tocdivStart);
		while( current == titleStart || current == titleabbrevStart || current == subtitleStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else if( current == subtitleStart ) {
				llsubtitle();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == tocdivStart ) {
			lltocdiv();
		} else if( current == tocentryStart ) {
			lltocentry();
		} else error();
		while( current == tocdivStart || current == tocentryStart ) {
			if( current == tocdivStart ) {
				lltocdiv();
			} else if( current == tocentryStart ) {
				lltocentry();
			} else error();
		}
		pass(tocdivEnd);
	} else error();
}

void docbookParser::lltocentry()
{
	if( current == tocentryStart ) {
		pass(tocentryStart);
		while( current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(tocentryEnd);
	} else error();
}

void docbookParser::lltasksummary()
{
	if( current == tasksummaryStart ) {
		pass(tasksummaryStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(tasksummaryEnd);
	} else error();
}

void docbookParser::lltaskprerequisites()
{
	if( current == taskprerequisitesStart ) {
		pass(taskprerequisitesStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(taskprerequisitesEnd);
	} else error();
}

void docbookParser::lltaskrelated()
{
	if( current == taskrelatedStart ) {
		pass(taskrelatedStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(taskrelatedEnd);
	} else error();
}

void docbookParser::llcallout()
{
	if( current == calloutStart ) {
		pass(calloutStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(calloutEnd);
	} else error();
}

void docbookParser::llareaspec()
{
	if( current == areaspecStart ) {
		pass(areaspecStart);
		if( current == areaStart ) {
			llarea();
		} else if( current == areasetStart ) {
			llareaset();
		} else error();
		while( current == areaStart || current == areasetStart ) {
			if( current == areaStart ) {
				llarea();
			} else if( current == areasetStart ) {
				llareaset();
			} else error();
		}
		pass(areaspecEnd);
	} else error();
}

void docbookParser::llarea()
{
	if( current == areaStart ) {
		pass(areaStart);
		if( current == altStart ) {
			llalt();
		}
		pass(areaEnd);
	} else error();
}

void docbookParser::llareaset()
{
	if( current == areasetStart ) {
		pass(areasetStart);
		llarea();
		while( current == areaStart ) {
			llarea();
		}
		pass(areasetEnd);
	} else error();
}

void docbookParser::llproduction()
{
	if( current == productionStart ) {
		pass(productionStart);
		lllhs();
		llrhs();
		while( current == constraintStart ) {
			llconstraint();
		}
		pass(productionEnd);
	} else error();
}

void docbookParser::llproductionrecap()
{
	if( current == productionrecapStart ) {
		pass(productionrecapStart);
		pass(productionrecapEnd);
	} else error();
}

void docbookParser::lllhs()
{
	if( current == lhsStart ) {
		pass(lhsStart);
		pass(lhsEnd);
	} else error();
}

void docbookParser::llrhs()
{
	if( current == rhsStart ) {
		pass(rhsStart);
		while( current == lineannotationStart || current == nonterminalStart || current == sbrStart ) {
			if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == sbrStart ) {
				llsbr();
			} else error();
		}
		pass(rhsEnd);
	} else error();
}

void docbookParser::llconstraint()
{
	if( current == constraintStart ) {
		pass(constraintStart);
		pass(constraintEnd);
	} else error();
}

void docbookParser::llsbr()
{
	if( current == sbrStart ) {
		pass(sbrStart);
		pass(sbrEnd);
	} else error();
}

void docbookParser::lltgroup()
{
	if( current == tgroupStart ) {
		pass(tgroupStart);
		while( current == colspecStart ) {
			llcolspec();
		}
		while( current == spanspecStart ) {
			llspanspec();
		}
		if( current == theadStart ) {
			llthead();
		}
		if( current == tfootStart ) {
			lltfoot();
		}
		lltbody();
		pass(tgroupEnd);
	} else error();
}

void docbookParser::llcolspec()
{
	if( current == colspecStart ) {
		pass(colspecStart);
		pass(colspecEnd);
	} else error();
}

void docbookParser::llspanspec()
{
	if( current == spanspecStart ) {
		pass(spanspecStart);
		pass(spanspecEnd);
	} else error();
}

void docbookParser::llthead()
{
	if( current == theadStart ) {
		pass(theadStart);
		while( current == colspecStart ) {
			llcolspec();
		}
		if( current == rowStart ) {
			llrow();
			while( current == rowStart ) {
				llrow();
			}
		} else if( current == trStart ) {
			lltr();
			while( current == trStart ) {
				lltr();
			}
		} else error();
		pass(theadEnd);
	} else error();
}

void docbookParser::lltfoot()
{
	if( current == tfootStart ) {
		pass(tfootStart);
		while( current == colspecStart ) {
			llcolspec();
		}
		if( current == rowStart ) {
			llrow();
			while( current == rowStart ) {
				llrow();
			}
		} else if( current == trStart ) {
			lltr();
			while( current == trStart ) {
				lltr();
			}
		} else error();
		pass(tfootEnd);
	} else error();
}

void docbookParser::lltbody()
{
	if( current == tbodyStart ) {
		pass(tbodyStart);
		if( current == rowStart ) {
			llrow();
			while( current == rowStart ) {
				llrow();
			}
		} else if( current == trStart ) {
			lltr();
			while( current == trStart ) {
				lltr();
			}
		} else error();
		pass(tbodyEnd);
	} else error();
}

void docbookParser::llrow()
{
	if( current == rowStart ) {
		pass(rowStart);
		if( current == entryStart ) {
			llentry();
		} else if( current == entrytblStart ) {
			llentrytbl();
		} else error();
		while( current == entryStart || current == entrytblStart ) {
			if( current == entryStart ) {
				llentry();
			} else if( current == entrytblStart ) {
				llentrytbl();
			} else error();
		}
		pass(rowEnd);
	} else error();
}

void docbookParser::lltr()
{
	if( current == trStart ) {
		pass(trStart);
		if( current == thStart ) {
			llth();
		} else if( current == tdStart ) {
			lltd();
		} else error();
		while( current == thStart || current == tdStart ) {
			if( current == thStart ) {
				llth();
			} else if( current == tdStart ) {
				lltd();
			} else error();
		}
		pass(trEnd);
	} else error();
}

void docbookParser::llentry()
{
	if( current == entryStart ) {
		pass(entryStart);
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == footnoteStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == inlinemediaobjectStart || current == addressStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == revhistoryStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == glosslistStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliolistStart || current == bibliorefStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == corefStart || current == productionsetStart || current == nonterminalStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == functionStart || current == classsynopsisStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == fieldsynopsisStart || current == initializerStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(entryEnd);
	} else error();
}

void docbookParser::llentrytbl()
{
	if( current == entrytblStart ) {
		pass(entrytblStart);
		while( current == colspecStart ) {
			llcolspec();
		}
		while( current == spanspecStart ) {
			llspanspec();
		}
		if( current == theadStart ) {
			llthead();
		}
		lltbody();
		pass(entrytblEnd);
	} else error();
}

void docbookParser::llcol()
{
	if( current == colStart ) {
		pass(colStart);
		pass(colEnd);
	} else error();
}

void docbookParser::llcolgroup()
{
	if( current == colgroupStart ) {
		pass(colgroupStart);
		while( current == colStart ) {
			llcol();
		}
		pass(colgroupEnd);
	} else error();
}

void docbookParser::llth()
{
	if( current == thStart ) {
		pass(thStart);
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == footnoteStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == inlinemediaobjectStart || current == addressStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == revhistoryStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == glosslistStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliolistStart || current == bibliorefStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == corefStart || current == productionsetStart || current == nonterminalStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == functionStart || current == classsynopsisStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == fieldsynopsisStart || current == initializerStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(thEnd);
	} else error();
}

void docbookParser::lltd()
{
	if( current == tdStart ) {
		pass(tdStart);
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == footnoteStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == inlinemediaobjectStart || current == addressStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == revhistoryStart || current == packageStart || current == emailStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == glosslistStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliolistStart || current == bibliorefStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == corefStart || current == productionsetStart || current == nonterminalStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == functionStart || current == classsynopsisStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == fieldsynopsisStart || current == initializerStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(tdEnd);
	} else error();
}

void docbookParser::llmsgentry()
{
	if( current == msgentryStart ) {
		pass(msgentryStart);
		llmsg();
		while( current == msgStart ) {
			llmsg();
		}
		if( current == msginfoStart ) {
			llmsginfo();
		}
		while( current == msgexplanStart ) {
			llmsgexplan();
		}
		pass(msgentryEnd);
	} else error();
}

void docbookParser::llsimplemsgentry()
{
	if( current == simplemsgentryStart ) {
		pass(simplemsgentryStart);
		llmsgtext();
		llmsgexplan();
		while( current == msgexplanStart ) {
			llmsgexplan();
		}
		pass(simplemsgentryEnd);
	} else error();
}

void docbookParser::llmsg()
{
	if( current == msgStart ) {
		pass(msgStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llmsgmain();
		while( current == msgsubStart || current == msgrelStart ) {
			if( current == msgsubStart ) {
				llmsgsub();
			} else if( current == msgrelStart ) {
				llmsgrel();
			} else error();
		}
		pass(msgEnd);
	} else error();
}

void docbookParser::llmsginfo()
{
	if( current == msginfoStart ) {
		pass(msginfoStart);
		while( current == msglevelStart || current == msgorigStart || current == msgaudStart ) {
			if( current == msglevelStart ) {
				llmsglevel();
			} else if( current == msgorigStart ) {
				llmsgorig();
			} else if( current == msgaudStart ) {
				llmsgaud();
			} else error();
		}
		pass(msginfoEnd);
	} else error();
}

void docbookParser::llmsgexplan()
{
	if( current == msgexplanStart ) {
		pass(msgexplanStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(msgexplanEnd);
	} else error();
}

void docbookParser::llmsgtext()
{
	if( current == msgtextStart ) {
		pass(msgtextStart);
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(msgtextEnd);
	} else error();
}

void docbookParser::llmsgmain()
{
	if( current == msgmainStart ) {
		pass(msgmainStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llmsgtext();
		pass(msgmainEnd);
	} else error();
}

void docbookParser::llmsgsub()
{
	if( current == msgsubStart ) {
		pass(msgsubStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llmsgtext();
		pass(msgsubEnd);
	} else error();
}

void docbookParser::llmsgrel()
{
	if( current == msgrelStart ) {
		pass(msgrelStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llmsgtext();
		pass(msgrelEnd);
	} else error();
}

void docbookParser::llmsglevel()
{
	if( current == msglevelStart ) {
		pass(msglevelStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(msglevelEnd);
	} else error();
}

void docbookParser::llmsgorig()
{
	if( current == msgorigStart ) {
		pass(msgorigStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(msgorigEnd);
	} else error();
}

void docbookParser::llmsgaud()
{
	if( current == msgaudStart ) {
		pass(msgaudStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(msgaudEnd);
	} else error();
}

void docbookParser::llqandadiv()
{
	if( current == qandadivStart ) {
		pass(qandadivStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		if( current == qandadivStart ) {
			llqandadiv();
			while( current == qandadivStart ) {
				llqandadiv();
			}
		} else if( current == qandaentryStart ) {
			llqandaentry();
			while( current == qandaentryStart ) {
				llqandaentry();
			}
		} else error();
		pass(qandadivEnd);
	} else error();
}

void docbookParser::llqandaentry()
{
	if( current == qandaentryStart ) {
		pass(qandaentryStart);
		while( current == titleStart || current == titleabbrevStart ) {
			if( current == titleStart ) {
				lltitle();
			} else if( current == titleabbrevStart ) {
				lltitleabbrev();
			} else error();
		}
		if( current == infoStart ) {
			llinfo();
		}
		llquestion();
		while( current == answerStart ) {
			llanswer();
		}
		pass(qandaentryEnd);
	} else error();
}

void docbookParser::llquestion()
{
	if( current == questionStart ) {
		pass(questionStart);
		if( current == labelStart ) {
			lllabel();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(questionEnd);
	} else error();
}

void docbookParser::llanswer()
{
	if( current == answerStart ) {
		pass(answerStart);
		if( current == labelStart ) {
			lllabel();
		}
		if( current == procedureStart ) {
			llprocedure();
		} else if( current == sidebarStart ) {
			llsidebar();
		} else if( current == blockquoteStart ) {
			llblockquote();
		} else if( current == bridgeheadStart ) {
			llbridgehead();
		} else if( current == remarkStart ) {
			llremark();
		} else if( current == epigraphStart ) {
			llepigraph();
		} else if( current == formalparaStart ) {
			llformalpara();
		} else if( current == paraStart ) {
			llpara();
		} else if( current == simparaStart ) {
			llsimpara();
		} else if( current == itemizedlistStart ) {
			llitemizedlist();
		} else if( current == orderedlistStart ) {
			llorderedlist();
		} else if( current == segmentedlistStart ) {
			llsegmentedlist();
		} else if( current == simplelistStart ) {
			llsimplelist();
		} else if( current == variablelistStart ) {
			llvariablelist();
		} else if( current == exampleStart ) {
			llexample();
		} else if( current == informalexampleStart ) {
			llinformalexample();
		} else if( current == literallayoutStart ) {
			llliterallayout();
		} else if( current == screenStart ) {
			llscreen();
		} else if( current == screenshotStart ) {
			llscreenshot();
		} else if( current == figureStart ) {
			llfigure();
		} else if( current == informalfigureStart ) {
			llinformalfigure();
		} else if( current == mediaobjectStart ) {
			llmediaobject();
		} else if( current == addressStart ) {
			lladdress();
		} else if( current == revhistoryStart ) {
			llrevhistory();
		} else if( current == anchorStart ) {
			llanchor();
		} else if( current == annotationStart ) {
			llannotation();
		} else if( current == glosslistStart ) {
			llglosslist();
		} else if( current == bibliolistStart ) {
			llbibliolist();
		} else if( current == indextermStart ) {
			llindexterm();
		} else if( current == taskStart ) {
			lltask();
		} else if( current == calloutlistStart ) {
			llcalloutlist();
		} else if( current == programlistingcoStart ) {
			llprogramlistingco();
		} else if( current == screencoStart ) {
			llscreenco();
		} else if( current == productionsetStart ) {
			llproductionset();
		} else if( current == constraintdefStart ) {
			llconstraintdef();
		} else if( current == tableStart ) {
			lltable();
		} else if( current == informaltableStart ) {
			llinformaltable();
		} else if( current == msgsetStart ) {
			llmsgset();
		} else if( current == qandasetStart ) {
			llqandaset();
		} else if( current == equationStart ) {
			llequation();
		} else if( current == informalequationStart ) {
			llinformalequation();
		} else if( current == cmdsynopsisStart ) {
			llcmdsynopsis();
		} else if( current == synopsisStart ) {
			llsynopsis();
		} else if( current == funcsynopsisStart ) {
			llfuncsynopsis();
		} else if( current == classsynopsisStart ) {
			llclasssynopsis();
		} else if( current == fieldsynopsisStart ) {
			llfieldsynopsis();
		} else if( current == constructorsynopsisStart ) {
			llconstructorsynopsis();
		} else if( current == destructorsynopsisStart ) {
			lldestructorsynopsis();
		} else if( current == methodsynopsisStart ) {
			llmethodsynopsis();
		} else if( current == programlistingStart ) {
			llprogramlisting();
		} else if( current == cautionStart ) {
			llcaution();
		} else if( current == importantStart ) {
			llimportant();
		} else if( current == noteStart ) {
			llnote();
		} else if( current == tipStart ) {
			lltip();
		} else if( current == warningStart ) {
			llwarning();
		} else error();
		while( current == procedureStart || current == sidebarStart || current == blockquoteStart || current == bridgeheadStart || current == remarkStart || current == epigraphStart || current == formalparaStart || current == paraStart || current == simparaStart || current == itemizedlistStart || current == orderedlistStart || current == segmentedlistStart || current == simplelistStart || current == variablelistStart || current == exampleStart || current == informalexampleStart || current == literallayoutStart || current == screenStart || current == screenshotStart || current == figureStart || current == informalfigureStart || current == mediaobjectStart || current == addressStart || current == revhistoryStart || current == anchorStart || current == annotationStart || current == glosslistStart || current == bibliolistStart || current == indextermStart || current == taskStart || current == calloutlistStart || current == programlistingcoStart || current == screencoStart || current == productionsetStart || current == constraintdefStart || current == tableStart || current == informaltableStart || current == msgsetStart || current == qandasetStart || current == equationStart || current == informalequationStart || current == cmdsynopsisStart || current == synopsisStart || current == funcsynopsisStart || current == classsynopsisStart || current == fieldsynopsisStart || current == constructorsynopsisStart || current == destructorsynopsisStart || current == methodsynopsisStart || current == programlistingStart || current == cautionStart || current == importantStart || current == noteStart || current == tipStart || current == warningStart ) {
			if( current == procedureStart ) {
				llprocedure();
			} else if( current == sidebarStart ) {
				llsidebar();
			} else if( current == blockquoteStart ) {
				llblockquote();
			} else if( current == bridgeheadStart ) {
				llbridgehead();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == epigraphStart ) {
				llepigraph();
			} else if( current == formalparaStart ) {
				llformalpara();
			} else if( current == paraStart ) {
				llpara();
			} else if( current == simparaStart ) {
				llsimpara();
			} else if( current == itemizedlistStart ) {
				llitemizedlist();
			} else if( current == orderedlistStart ) {
				llorderedlist();
			} else if( current == segmentedlistStart ) {
				llsegmentedlist();
			} else if( current == simplelistStart ) {
				llsimplelist();
			} else if( current == variablelistStart ) {
				llvariablelist();
			} else if( current == exampleStart ) {
				llexample();
			} else if( current == informalexampleStart ) {
				llinformalexample();
			} else if( current == literallayoutStart ) {
				llliterallayout();
			} else if( current == screenStart ) {
				llscreen();
			} else if( current == screenshotStart ) {
				llscreenshot();
			} else if( current == figureStart ) {
				llfigure();
			} else if( current == informalfigureStart ) {
				llinformalfigure();
			} else if( current == mediaobjectStart ) {
				llmediaobject();
			} else if( current == addressStart ) {
				lladdress();
			} else if( current == revhistoryStart ) {
				llrevhistory();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == glosslistStart ) {
				llglosslist();
			} else if( current == bibliolistStart ) {
				llbibliolist();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == taskStart ) {
				lltask();
			} else if( current == calloutlistStart ) {
				llcalloutlist();
			} else if( current == programlistingcoStart ) {
				llprogramlistingco();
			} else if( current == screencoStart ) {
				llscreenco();
			} else if( current == productionsetStart ) {
				llproductionset();
			} else if( current == constraintdefStart ) {
				llconstraintdef();
			} else if( current == tableStart ) {
				lltable();
			} else if( current == informaltableStart ) {
				llinformaltable();
			} else if( current == msgsetStart ) {
				llmsgset();
			} else if( current == qandasetStart ) {
				llqandaset();
			} else if( current == equationStart ) {
				llequation();
			} else if( current == informalequationStart ) {
				llinformalequation();
			} else if( current == cmdsynopsisStart ) {
				llcmdsynopsis();
			} else if( current == synopsisStart ) {
				llsynopsis();
			} else if( current == funcsynopsisStart ) {
				llfuncsynopsis();
			} else if( current == classsynopsisStart ) {
				llclasssynopsis();
			} else if( current == fieldsynopsisStart ) {
				llfieldsynopsis();
			} else if( current == constructorsynopsisStart ) {
				llconstructorsynopsis();
			} else if( current == destructorsynopsisStart ) {
				lldestructorsynopsis();
			} else if( current == methodsynopsisStart ) {
				llmethodsynopsis();
			} else if( current == programlistingStart ) {
				llprogramlisting();
			} else if( current == cautionStart ) {
				llcaution();
			} else if( current == importantStart ) {
				llimportant();
			} else if( current == noteStart ) {
				llnote();
			} else if( current == tipStart ) {
				lltip();
			} else if( current == warningStart ) {
				llwarning();
			} else error();
		}
		pass(answerEnd);
	} else error();
}

void docbookParser::lllabel()
{
	if( current == labelStart ) {
		pass(labelStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(labelEnd);
	} else error();
}

void docbookParser::llmathphrase()
{
	if( current == mathphraseStart ) {
		pass(mathphraseStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == emphasisStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(mathphraseEnd);
	} else error();
}

void docbookParser::llarg()
{
	if( current == argStart ) {
		pass(argStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == argStart || current == groupStart || current == sbrStart || current == synopfragmentrefStart || current == optionStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == argStart ) {
				llarg();
			} else if( current == groupStart ) {
				llgroup();
			} else if( current == sbrStart ) {
				llsbr();
			} else if( current == synopfragmentrefStart ) {
				llsynopfragmentref();
			} else if( current == optionStart ) {
				lloption();
			} else error();
		}
		pass(argEnd);
	} else error();
}

void docbookParser::llgroup()
{
	if( current == groupStart ) {
		pass(groupStart);
		if( current == replaceableStart ) {
			llreplaceable();
		} else if( current == argStart ) {
			llarg();
		} else if( current == groupStart ) {
			llgroup();
		} else if( current == sbrStart ) {
			llsbr();
		} else if( current == synopfragmentrefStart ) {
			llsynopfragmentref();
		} else if( current == optionStart ) {
			lloption();
		} else error();
		while( current == replaceableStart || current == argStart || current == groupStart || current == sbrStart || current == synopfragmentrefStart || current == optionStart ) {
			if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == argStart ) {
				llarg();
			} else if( current == groupStart ) {
				llgroup();
			} else if( current == sbrStart ) {
				llsbr();
			} else if( current == synopfragmentrefStart ) {
				llsynopfragmentref();
			} else if( current == optionStart ) {
				lloption();
			} else error();
		}
		pass(groupEnd);
	} else error();
}

void docbookParser::llsynopfragment()
{
	if( current == synopfragmentStart ) {
		pass(synopfragmentStart);
		if( current == argStart ) {
			llarg();
		} else if( current == groupStart ) {
			llgroup();
		} else error();
		while( current == argStart || current == groupStart ) {
			if( current == argStart ) {
				llarg();
			} else if( current == groupStart ) {
				llgroup();
			} else error();
		}
		pass(synopfragmentEnd);
	} else error();
}

void docbookParser::llsynopfragmentref()
{
	if( current == synopfragmentrefStart ) {
		pass(synopfragmentrefStart);
		pass(synopfragmentrefEnd);
	} else error();
}

void docbookParser::llfuncsynopsisinfo()
{
	if( current == funcsynopsisinfoStart ) {
		pass(funcsynopsisinfoStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(funcsynopsisinfoEnd);
	} else error();
}

void docbookParser::llfuncprototype()
{
	if( current == funcprototypeStart ) {
		pass(funcprototypeStart);
		while( current == modifierStart ) {
			llmodifier();
		}
		llfuncdef();
		if( current == voidStart ) {
			llvoid();
		} else if( current == varargsStart ) {
			llvarargs();
		} else if( current == paramdefStart ) {
			llparamdef();
			while( current == paramdefStart ) {
				llparamdef();
			}
			if( current == varargsStart ) {
				llvarargs();
			}
		} else error();
		while( current == modifierStart ) {
			llmodifier();
		}
		pass(funcprototypeEnd);
	} else error();
}

void docbookParser::llfuncdef()
{
	if( current == funcdefStart ) {
		pass(funcdefStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == functionStart || current == typeStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == typeStart ) {
				lltype();
			} else error();
		}
		pass(funcdefEnd);
	} else error();
}

void docbookParser::llvoid()
{
	if( current == voidStart ) {
		pass(voidStart);
		pass(voidEnd);
	} else error();
}

void docbookParser::llvarargs()
{
	if( current == varargsStart ) {
		pass(varargsStart);
		pass(varargsEnd);
	} else error();
}

void docbookParser::llparamdef()
{
	if( current == paramdefStart ) {
		pass(paramdefStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == parameterStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart || current == funcparamsStart || current == initializerStart || current == typeStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == funcparamsStart ) {
				llfuncparams();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == typeStart ) {
				lltype();
			} else error();
		}
		pass(paramdefEnd);
	} else error();
}

void docbookParser::llfuncparams()
{
	if( current == funcparamsStart ) {
		pass(funcparamsStart);
		while( current == remarkStart || current == inlinemediaobjectStart || current == replaceableStart || current == phraseStart || current == subscriptStart || current == superscriptStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == bibliorefStart || current == indextermStart ) {
			if( current == remarkStart ) {
				llremark();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else error();
		}
		pass(funcparamsEnd);
	} else error();
}

void docbookParser::llclasssynopsisinfo()
{
	if( current == classsynopsisinfoStart ) {
		pass(classsynopsisinfoStart);
		while( current == infoStart || current == remarkStart || current == footnoteStart || current == inlinemediaobjectStart || current == textobjectStart || current == jobtitleStart || current == orgnameStart || current == personnameStart || current == authorStart || current == personStart || current == orgStart || current == dateStart || current == editorStart || current == citebiblioidStart || current == packageStart || current == emailStart || current == lineannotationStart || current == parameterStart || current == replaceableStart || current == uriStart || current == abbrevStart || current == acronymStart || current == citationStart || current == citerefentryStart || current == citetitleStart || current == emphasisStart || current == foreignphraseStart || current == phraseStart || current == quoteStart || current == subscriptStart || current == superscriptStart || current == trademarkStart || current == wordaswordStart || current == footnoterefStart || current == xrefStart || current == linkStart || current == olinkStart || current == anchorStart || current == altStart || current == annotationStart || current == firsttermStart || current == glosstermStart || current == termdefStart || current == bibliorefStart || current == indextermStart || current == coStart || current == corefStart || current == nonterminalStart || current == inlineequationStart || current == markupStart || current == tagStart || current == symbolStart || current == tokenStart || current == literalStart || current == codeStart || current == constantStart || current == productnameStart || current == productnumberStart || current == databaseStart || current == applicationStart || current == hardwareStart || current == guibuttonStart || current == guiiconStart || current == guilabelStart || current == guimenuStart || current == guimenuitemStart || current == guisubmenuStart || current == menuchoiceStart || current == mousebuttonStart || current == keycapStart || current == keycodeStart || current == keycomboStart || current == keysymStart || current == accelStart || current == shortcutStart || current == promptStart || current == envarStart || current == filenameStart || current == commandStart || current == computeroutputStart || current == userinputStart || current == functionStart || current == ooclassStart || current == oointerfaceStart || current == ooexceptionStart || current == modifierStart || current == interfacenameStart || current == exceptionnameStart || current == initializerStart || current == methodnameStart || current == varnameStart || current == returnvalueStart || current == typeStart || current == classnameStart || current == errorcodeStart || current == errornameStart || current == errortextStart || current == errortypeStart || current == systemitemStart || current == optionStart || current == optionalStart || current == propertyStart ) {
			if( current == infoStart ) {
				llinfo();
			} else if( current == remarkStart ) {
				llremark();
			} else if( current == footnoteStart ) {
				llfootnote();
			} else if( current == inlinemediaobjectStart ) {
				llinlinemediaobject();
			} else if( current == textobjectStart ) {
				lltextobject();
			} else if( current == jobtitleStart ) {
				lljobtitle();
			} else if( current == orgnameStart ) {
				llorgname();
			} else if( current == personnameStart ) {
				llpersonname();
			} else if( current == authorStart ) {
				llauthor();
			} else if( current == personStart ) {
				llperson();
			} else if( current == orgStart ) {
				llorg();
			} else if( current == dateStart ) {
				lldate();
			} else if( current == editorStart ) {
				lleditor();
			} else if( current == citebiblioidStart ) {
				llcitebiblioid();
			} else if( current == packageStart ) {
				llpackage();
			} else if( current == emailStart ) {
				llemail();
			} else if( current == lineannotationStart ) {
				lllineannotation();
			} else if( current == parameterStart ) {
				llparameter();
			} else if( current == replaceableStart ) {
				llreplaceable();
			} else if( current == uriStart ) {
				lluri();
			} else if( current == abbrevStart ) {
				llabbrev();
			} else if( current == acronymStart ) {
				llacronym();
			} else if( current == citationStart ) {
				llcitation();
			} else if( current == citerefentryStart ) {
				llciterefentry();
			} else if( current == citetitleStart ) {
				llcitetitle();
			} else if( current == emphasisStart ) {
				llemphasis();
			} else if( current == foreignphraseStart ) {
				llforeignphrase();
			} else if( current == phraseStart ) {
				llphrase();
			} else if( current == quoteStart ) {
				llquote();
			} else if( current == subscriptStart ) {
				llsubscript();
			} else if( current == superscriptStart ) {
				llsuperscript();
			} else if( current == trademarkStart ) {
				lltrademark();
			} else if( current == wordaswordStart ) {
				llwordasword();
			} else if( current == footnoterefStart ) {
				llfootnoteref();
			} else if( current == xrefStart ) {
				llxref();
			} else if( current == linkStart ) {
				lllink();
			} else if( current == olinkStart ) {
				llolink();
			} else if( current == anchorStart ) {
				llanchor();
			} else if( current == altStart ) {
				llalt();
			} else if( current == annotationStart ) {
				llannotation();
			} else if( current == firsttermStart ) {
				llfirstterm();
			} else if( current == glosstermStart ) {
				llglossterm();
			} else if( current == termdefStart ) {
				lltermdef();
			} else if( current == bibliorefStart ) {
				llbiblioref();
			} else if( current == indextermStart ) {
				llindexterm();
			} else if( current == coStart ) {
				llco();
			} else if( current == corefStart ) {
				llcoref();
			} else if( current == nonterminalStart ) {
				llnonterminal();
			} else if( current == inlineequationStart ) {
				llinlineequation();
			} else if( current == markupStart ) {
				llmarkup();
			} else if( current == tagStart ) {
				lltag();
			} else if( current == symbolStart ) {
				llsymbol();
			} else if( current == tokenStart ) {
				lltoken();
			} else if( current == literalStart ) {
				llliteral();
			} else if( current == codeStart ) {
				llcode();
			} else if( current == constantStart ) {
				llconstant();
			} else if( current == productnameStart ) {
				llproductname();
			} else if( current == productnumberStart ) {
				llproductnumber();
			} else if( current == databaseStart ) {
				lldatabase();
			} else if( current == applicationStart ) {
				llapplication();
			} else if( current == hardwareStart ) {
				llhardware();
			} else if( current == guibuttonStart ) {
				llguibutton();
			} else if( current == guiiconStart ) {
				llguiicon();
			} else if( current == guilabelStart ) {
				llguilabel();
			} else if( current == guimenuStart ) {
				llguimenu();
			} else if( current == guimenuitemStart ) {
				llguimenuitem();
			} else if( current == guisubmenuStart ) {
				llguisubmenu();
			} else if( current == menuchoiceStart ) {
				llmenuchoice();
			} else if( current == mousebuttonStart ) {
				llmousebutton();
			} else if( current == keycapStart ) {
				llkeycap();
			} else if( current == keycodeStart ) {
				llkeycode();
			} else if( current == keycomboStart ) {
				llkeycombo();
			} else if( current == keysymStart ) {
				llkeysym();
			} else if( current == accelStart ) {
				llaccel();
			} else if( current == shortcutStart ) {
				llshortcut();
			} else if( current == promptStart ) {
				llprompt();
			} else if( current == envarStart ) {
				llenvar();
			} else if( current == filenameStart ) {
				llfilename();
			} else if( current == commandStart ) {
				llcommand();
			} else if( current == computeroutputStart ) {
				llcomputeroutput();
			} else if( current == userinputStart ) {
				lluserinput();
			} else if( current == functionStart ) {
				llfunction();
			} else if( current == ooclassStart ) {
				llooclass();
			} else if( current == oointerfaceStart ) {
				lloointerface();
			} else if( current == ooexceptionStart ) {
				llooexception();
			} else if( current == modifierStart ) {
				llmodifier();
			} else if( current == interfacenameStart ) {
				llinterfacename();
			} else if( current == exceptionnameStart ) {
				llexceptionname();
			} else if( current == initializerStart ) {
				llinitializer();
			} else if( current == methodnameStart ) {
				llmethodname();
			} else if( current == varnameStart ) {
				llvarname();
			} else if( current == returnvalueStart ) {
				llreturnvalue();
			} else if( current == typeStart ) {
				lltype();
			} else if( current == classnameStart ) {
				llclassname();
			} else if( current == errorcodeStart ) {
				llerrorcode();
			} else if( current == errornameStart ) {
				llerrorname();
			} else if( current == errortextStart ) {
				llerrortext();
			} else if( current == errortypeStart ) {
				llerrortype();
			} else if( current == systemitemStart ) {
				llsystemitem();
			} else if( current == optionStart ) {
				lloption();
			} else if( current == optionalStart ) {
				lloptional();
			} else if( current == propertyStart ) {
				llproperty();
			} else error();
		}
		pass(classsynopsisinfoEnd);
	} else error();
}

void docbookParser::llmethodparam()
{
	if( current == methodparamStart ) {
		pass(methodparamStart);
		while( current == modifierStart || current == typeStart ) {
			if( current == modifierStart ) {
				llmodifier();
			} else if( current == typeStart ) {
				lltype();
			} else error();
		}
		if( current == parameterStart ) {
			llparameter();
			if( current == initializerStart ) {
				llinitializer();
			}
		} else if( current == funcparamsStart ) {
			llfuncparams();
		} else error();
		while( current == modifierStart ) {
			llmodifier();
		}
		pass(methodparamEnd);
	} else error();
}

